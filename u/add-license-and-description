#!/usr/bin/env raku

use Grammar::Tracer;
use Data::Dump::Tree;
use Config::TOML;

my $original-repo = "https://github.com/juce-framework/JUCE";

# We keep the existing list of C++ JUCE authors to record them in metadata.
my @cpp-authors = [
    "Adam <blekk2@gmail.com>",
    "Aga Janowicz <aga@roli.com>",
    "Agnieszka Janowicz <agnieszka.janowicz@roli.com>",
    "Alain Martin <amartin@keytrol.org>",
    "Anthony Nicholls <anthony@juce.com>",
    "Attila Szarvas <attila@juce.com>",
    "Cesare Ferrari <cesare@loftsoft.co.uk>",
    "Christian Haase <chrhaase@outlook.dk>",
    "Christopher Fonseka <chris.fonseka@googlemail.com>",
    "Dan Raviv <dan@soundradix.com>",
    "Daniel Walz <daniel.walz@roli.com>",
    "Dimitri Sudell <dimitri.sudell@roli.com>",
    "Fabian Renn-Giles <fabian@fielding.dev, fabian@roli.com>",
    "Felipe F. Tonello <felipe.tonello@roli.com>",
    "Felix Faire <felixfaire@gmail.com>",
    "Ian Clarkson <clarksonian@gmail.com>",
    "Ivan COHEN <ivan.cohen@musicalentropy.com>",
    "Ivan Cohen <ivan.cohen@musicalentropy.com>",
    "James Hurst <james@pintsized.co.uk>",
    "James Johnson <james.johnson@focusrite.com>",
    "Joshua Gerrard <joshua.gerrard@roli.com>",
    "Julian Storer <jules@BigMac.local, jules@bigmac.home, jules@rawmaterialsoftware.com>",
    "Leigh Marble <tech@laughing-stock.org>",
    "Lukasz Kozakiewicz <lukasz.kozakiewicz@roli.com>",
    "Mathieu Demange <contact@mathieudemange.fr>",
    "Matt Gonzalez <matt@echoaudio.com>",
    "Mike Toon <michael.toon@roli.com>",
    "Nathan Blair <nathan@mat.ucsb.edu>",
    "Noah Dayan <noahdayan@gmail.com>",
    "Oli <oli@juce.com>",
    "Oli James <oli@juce.com>",
    "Oliver James <oli@juce.com>",
    "Paul Gration <pmgration@gmail.com>",
    "Rachel <rachel@ROLIs-iMac.local>",
    "Rachel Susser <rachel.susser@roli.com>",
    "Reuben Thomas <reuk@users.noreply.github.com>",
    "Richard Meyer <richard@roli.com>",
    "Roland Rabien <figbug@gmail.com>",
    "Steve Lhomme <robux4@ycbcr.xyz>",
    "Tatsuya Shiozawa <shio.tatsu99@gmail.com>",
    "Timur Doumler <timur@roli.com>",
    "Tom Duncalf <tom@tomduncalf.com>",
    "Tom Maisey <tom.maisey@roli.com, tommaisey@gmail.com>",
    "Tom Poole <thomas.poole@roli.com, tom@juce.com>",
    "Tom Waldron <tom@roli.com>",
    "XmasRights <chris.fonseka@googlemail.com>",
    "Yuki <68385758+YukiChiyoda@users.noreply.github.com>",
    "Zsolt Garamvolgyi <zsolt@roli.com>",
    "attila <attila@juce.com>",
    "cesare <cesare.ferrari@gmail.com, cesare@loftsoft.co.uk>",
    "chroma <oli@chromalabs.co.uk>",
    "dimitri <dimitri.sudell@roli.com>",
    "dimitriroli <dimitri.sudell@roli.com>",
    "ed <ed_davies95@hotmail.co.uk, eddavies95@gmail.com>",
    "fieldingfabian <fabian@fielding.dev>",
    "fr810 <fr810@DESKTOP-JGTHN1K>",
    "hogliux <fabian.renn@gmail.com>",
    "juce-team <juce-team@dtk-office.local>",
    "jules <jules@juce.com, jules@rawmaterialsoftware.com, julianstorer@gmail.com>",
    "luigisambuy <lsambuy@stanford.edu>",
    "luz paz <luzpaz@pm.me>",
    "luzpaz <luzpaz@users.noreply.github.com>",
    "martin@ncore.li <martin@ncore.li>",
    "michael.toon <michael.toon@roli.com>",
    "miketoon <32300092+miketoon@users.noreply.github.com, michael.toon@roli.com>",
    "reuk <reuk@stretch, reuk@users.noreply.github.com, reuk@users.roreply.github.com>",
    "stefan <stefan.graenitz@gmail.com>",
    "stefan.graenitz <stefan.graenitz@gmail.com>",
    "tommaisey <tom.maisey@roli.com>",
    "tpoole <872729+tpoole@users.noreply.github.com, t.b.poole@gmail.com, thomas.poole@roli.com, tom@juce.com, tom@tp-mbp.local>",
    "無常 <3142324836@qq.com>",
];

# Instead of @crates, we now have a hash mapping each crate to a standardized description.
my %crates-and-description = (
    "aloe-aax"                         => "Rust translation of the AAX module for audio plugin development in Avid Pro Tools -- see JUCE's AAX.",
    "aloe-adsr"                        => "Attack-Decay-Sustain-Release envelope utilities for audio shaping and dynamic control -- see JUCE's ADSR.",
    "aloe-aiff"                        => "AIFF file format I/O functionality for reading and writing audio data -- see JUCE's AIFF handling.",
    "aloe-alert-window"                => "Cross-platform alert dialog component for user notifications and prompts -- see JUCE's AlertWindow.",
    "aloe-analytics"                   => "Generic analytics tracking and reporting for application metrics -- see JUCE's Analytics.",
    "aloe-android"                     => "Android-specific event loops, message dispatch, and JNI bridging -- see JUCE's Android platform code.",
    "aloe-android-audio"               => "Low-level audio I/O for Android, supporting device initialization and callbacks -- see JUCE's Android audio.",
    "aloe-android-camera"              => "Camera device control and media capture on Android devices -- see JUCE's Android camera integration.",
    "aloe-android-notifications"       => "Push notification framework for Android apps -- see JUCE's Android notification layer.",
    "aloe-android-video"               => "Video playback and capture interfaces on Android -- see JUCE's Android video implementation.",
    "aloe-animation"                   => "Animation utilities including transitions and timers for UI components -- see JUCE's Animation features.",
    "aloe-app"                         => "Application startup, event loop, and lifecycle management for Rust GUIs -- see JUCE's App framework.",
    "aloe-array"                       => "Dynamic array data structures offering contiguous storage and iteration -- see JUCE's Array class.",
    "aloe-atomic"                      => "Cross-platform atomic operations for lock-free concurrency -- see JUCE's Atomic wrappers.",
    "aloe-au"                          => "Audio Unit plugin development for macOS using Apple's CoreAudio framework -- see JUCE's AU wrappers.",
    "aloe-au-base"                     => "Foundational utilities for building Audio Unit plugins, connecting to CoreAudio -- see JUCE's AU base code.",
    "aloe-au-buffer"                   => "Management of audio buffers in AU processing callbacks -- see JUCE's AU buffer logic.",
    "aloe-au-carbon"                   => "Legacy Carbon bridging for older Audio Unit views and interaction -- see JUCE's AU Carbon support.",
    "aloe-au-channel"                  => "Configuration of Audio Unit channel layouts and data formats -- see JUCE's AU channel management.",
    "aloe-au-component"                => "Core Audio Unit component definitions for plugin integration -- see JUCE's AU component code.",
    "aloe-au-coreaudio"                => "Integration with CoreAudio APIs for low-level AU plugin processing -- see JUCE's CoreAudio in AU.",
    "aloe-au-debug"                    => "Debugging helpers for Apple Audio Unit plugin development -- see JUCE's AU debug facilities.",
    "aloe-au-device"                   => "Management of audio devices on macOS within Audio Unit environments -- see JUCE's AU device code.",
    "aloe-au-dispatch"                 => "Function dispatch mechanisms in Audio Unit plugins for parameter and processing calls -- see JUCE's AU dispatch.",
    "aloe-au-imports"                  => "Imports for Apple frameworks like AudioToolbox and CoreAudio used by Audio Unit crates -- see JUCE's AU imports.",
    "aloe-au-midi"                     => "MIDI event handling inside the Audio Unit environment -- see JUCE's AU MIDI layer.",
    "aloe-au-parameter"                => "Definition and automation of Audio Unit parameters -- see JUCE's AU parameter classes.",
    "aloe-au-streams"                  => "Streaming audio data in and out of Audio Unit plugins -- see JUCE's AU streaming interfaces.",
    "aloe-au-time"                     => "Management of timing information (timestamps, sample positions) in Audio Units -- see JUCE's AU time code.",
    "aloe-au-types"                    => "Common enumerations and type definitions for AU plugin development -- see JUCE's AU types.",
    "aloe-audio"                       => "Core audio features including signal handling, callback management, and I/O -- see JUCE's Audio module.",
    "aloe-audio-app-component"         => "Bridging UI components with audio logic for standalone apps -- see JUCE's AudioAppComponent pattern.",
    "aloe-audio-block"                 => "Block-based audio data structures for non-owning audio buffers -- see JUCE's AudioBlock concept.",
    "aloe-audio-device-manager"        => "Centralized manager for multiple audio devices and configurations -- see JUCE's AudioDeviceManager.",
    "aloe-audio-devices"               => "Platform-specific I/O layers for sound cards and drivers -- see JUCE's audio device abstractions.",
    "aloe-audio-interface"             => "Generic audio callback interfaces unifying input and output streams -- see JUCE's AudioIODevice callbacks.",
    "aloe-audio-linux-alsa"            => "ALSA-based audio driver integration on Linux platforms -- see JUCE's ALSA support.",
    "aloe-audio-linux-bela"            => "Integration with the Bela platform for ultra-low-latency audio -- see JUCE's Bela expansions.",
    "aloe-audio-linux-jack"            => "JACK-based audio connectivity on Linux for pro-audio environments -- see JUCE's JACK driver.",
    "aloe-audio-plugin-client"         => "Plugin client utilities supporting multiple formats in a unified approach -- see JUCE's plugin client code.",
    "aloe-audio-plugin-format"         => "Standard interface for scanning, loading, and instantiating audio plugins -- see JUCE's AudioPluginFormat.",
    "aloe-audio-plugin-host"           => "Host framework for loading and controlling external audio plugins -- see JUCE's PluginHost classes.",
    "aloe-audio-plugin-instance"       => "Wrapper around a loaded plugin instance with uniform access -- see JUCE's AudioPluginInstance.",
    "aloe-audio-processor"             => "AudioProcessor-like APIs forming the backbone of audio processing -- see JUCE's AudioProcessor.",
    "aloe-audio-processor-editor"      => "Links user interfaces to AudioProcessors for interactive controls -- see JUCE's AudioProcessorEditor.",
    "aloe-audio-processor-graph"       => "Directed graph of interconnected AudioProcessors for routing -- see JUCE's AudioProcessorGraph.",
    "aloe-audio-processor-value-tree"  => "Parameter state management via ValueTrees in audio plugins -- see JUCE's AudioProcessorValueTreeState.",
    "aloe-audio-source"                => "AudioSource traits for streaming, buffering, or generating audio data -- see JUCE's AudioSource.",
    "aloe-audio-source-player"         => "A player that streams data from an AudioSource to an audio device -- see JUCE's AudioSourcePlayer.",
    "aloe-audio-thumbnail"             => "Waveform thumbnails for quick display of audio files -- see JUCE's AudioThumbnail.",
    "aloe-audio-transport-source"      => "Transport-based playback controls (play, stop, seek) for audio streams -- see JUCE's AudioTransportSource.",
    "aloe-bigint"                      => "Big integer arithmetic for large-number calculations -- see JUCE's BigInteger.",
    "aloe-box2d"                       => "Integration of the Box2D physics engine for 2D collision and simulation demos -- see JUCE's Box2D examples.",
    "aloe-bubble"                      => "Bubble message component for tooltips or notifications -- see JUCE's BubbleMessageComponent.",
    "aloe-buffers"                     => "Generic buffer abstractions for audio or data blocks -- see JUCE's core buffer utilities.",
    "aloe-buttons"                     => "Button widgets including push button and toggle styles -- see JUCE's Button classes.",
    "aloe-callout-box"                 => "Callout-style popups anchored to a specific component -- see JUCE's CallOutBox.",
    "aloe-camera"                      => "Cross-platform camera capture and preview for desktop and mobile -- see JUCE's CameraDevice.",
    "aloe-caret-component"             => "Text caret drawing within editable fields -- see JUCE's CaretComponent.",
    "aloe-cd"                          => "Compact disc data access utilities -- see JUCE's (deprecated) CD-related code.",
    "aloe-char"                        => "Unicode character manipulation, with pointer-based iteration -- see JUCE's CharPointer classes.",
    "aloe-chorus"                      => "Chorus audio effect with time-based modulation -- see JUCE's DSP examples.",
    "aloe-codec"                       => "Common audio codec interface for file format compatibility -- see JUCE's audio codecs.",
    "aloe-colour"                      => "Color management, RGBA manipulation, and alpha blending -- see JUCE's Colour class.",
    "aloe-colourselector"              => "GUI panel for selecting colors, swatches, and sliders -- see JUCE's ColourSelector.",
    "aloe-combobox"                    => "Drop-down combo box control with text entry -- see JUCE's ComboBox.",
    "aloe-commands"                    => "Application command handling and key mappings -- see JUCE's ApplicationCommandManager.",
    "aloe-component"                   => "Core GUI building block with bounds, painting, and focus control -- see JUCE's Component class.",
    "aloe-concertina"                  => "Accordion-like container that expands or collapses sections -- see JUCE's ConcertinaPanel.",
    "aloe-container"                   => "Grouping and layout container for child components -- see JUCE's top-level Component usage.",
    "aloe-content-sharer"              => "Sharing data to external apps or social platforms -- see JUCE's ContentSharer.",
    "aloe-convolution"                 => "Convolution-based audio processing for filters and reverb -- see JUCE's Convolution engine.",
    "aloe-convolution-demo"            => "Demonstration harness for testing convolution processing -- see JUCE's DSP demos.",
    "aloe-core"                        => "Fundamental data types, utilities, and macros used by other crates -- see JUCE's Core module.",
    "aloe-critical-section"            => "Locking primitives and critical sections for thread safety -- see JUCE's CriticalSection.",
    "aloe-crypto"                      => "Encryption, hashing, and other cryptography utilities -- see JUCE's cryptography classes.",
    "aloe-delay"                       => "Basic delay effect for time-based audio processing -- see JUCE's DSP delay utilities.",
    "aloe-delay-processor"             => "Wraps the delay effect in a reusable AudioProcessor structure -- see JUCE's audio processor approach.",
    "aloe-demo"                        => "Combined demonstration showcasing multiple Aloe features -- see JUCE's Demo application model.",
    "aloe-deps"                        => "Collection of third-party dependencies shared by multiple crates -- see JUCE's library bundling approach.",
    "aloe-derive"                      => "Procedural macros (syn 2.0) for deriving standard traits in Aloe modules -- see JUCE's meta-programming analogs.",
    "aloe-desktop"                     => "Desktop-wide settings, global event loops, and screen info -- see JUCE's Desktop class.",
    "aloe-dialogwindow"                => "Standard window for dialogs and popups with optional custom content -- see JUCE's DialogWindow.",
    "aloe-distortion"                  => "Distortion audio effect with wave shaping and harmonics -- see JUCE's DSP distortion examples.",
    "aloe-documentwindow"              => "Top-level window container supporting menus and title bars -- see JUCE's DocumentWindow.",
    "aloe-drag-and-drop"               => "Enables drag-and-drop operations for GUI components -- see JUCE's DragAndDropContainer.",
    "aloe-drawables"                   => "Vector-based drawing elements scalable at runtime -- see JUCE's Drawable classes.",
    "aloe-dsp"                         => "Collection of DSP routines for filters, transforms, and signal processing -- see JUCE's DSP module.",
    "aloe-dynamic-object"              => "Key-value property storage for scripting or reflection -- see JUCE's DynamicObject.",
    "aloe-dynamics"                    => "Dynamics processing with compressors, limiters, and expanders -- see JUCE's DSP dynamics.",
    "aloe-editor"                      => "Text editor and code editing utilities with syntax and highlighting -- see JUCE's text editor classes.",
    "aloe-embedding"                   => "Embedding native platform views inside Aloe-based UIs -- see JUCE's embedding layer.",
    "aloe-events"                      => "Central event dispatching and listener patterns for UI or audio -- see JUCE's MessageManager.",
    "aloe-ex"                          => "Base crate for example code referencing multiple Aloe modules -- see JUCE's examples folder.",
    "aloe-ex-app"                      => "Demonstrates building a desktop application with Aloe crates -- see JUCE's app example.",
    "aloe-ex-assets"                   => "Shared assets (images, audio) used by various Aloe demos -- see JUCE's resource bundling.",
    "aloe-ex-audio"                    => "Showcases audio input, DSP, and playback examples -- see JUCE's audio tutorials.",
    "aloe-ex-demorunner"               => "Dedicated runner for launching demos from different crates -- see JUCE's DemoRunner.",
    "aloe-ex-gui"                      => "GUI control and layout demos for interactive visuals -- see JUCE's GUI sample code.",
    "aloe-ex-plugins"                  => "Demonstrates plugin hosting or creation with the Aloe plugin crates -- see JUCE's plugin examples.",
    "aloe-ex-utilities"                => "Utility demos for concurrency, file handling, cryptography, and more -- see JUCE's utility examples.",
    "aloe-fft"                         => "Fast Fourier Transform utilities for frequency-domain operations -- see JUCE's FFT.",
    "aloe-fft-demo"                    => "Real-time FFT demonstration for spectral analysis -- see JUCE's FFT tutorial code.",
    "aloe-filebrowser"                 => "File browser UI component for selecting or managing files -- see JUCE's FileBrowserComponent.",
    "aloe-files"                       => "File I/O and path utilities for reading and writing data -- see JUCE's File handling.",
    "aloe-filter"                      => "Common filter types (low-pass, high-pass, band-pass) for audio processing -- see JUCE's DSP filters.",
    "aloe-fixed-size-function"         => "Fixed-capacity function wrapper for real-time or limited-heap usage -- see JUCE's function object patterns.",
    "aloe-flac"                        => "Support for FLAC (Free Lossless Audio Codec) reading/writing -- see JUCE's FLAC format integration.",
    "aloe-flexbox"                     => "FlexBox layout system for responsive UI arrangement -- see JUCE's FlexBox.",
    "aloe-font"                        => "Font face loading, glyph rendering, and metrics -- see JUCE's Font class.",
    "aloe-geometry"                    => "Geometric data types like points, rectangles, and transforms -- see JUCE's geometry utilities.",
    "aloe-gif"                         => "GIF file reading and writing, including animated frames -- see JUCE's GIF loader.",
    "aloe-graphics"                    => "2D rendering and image manipulation for custom drawing -- see JUCE's Graphics module.",
    "aloe-grid"                        => "CSS-like grid layout system for GUI components -- see JUCE's Grid class.",
    "aloe-identifier"                  => "String-based identifiers for property lookups and references -- see JUCE's Identifier.",
    "aloe-image"                       => "Pixel-based image structures, supporting multiple formats and color depths -- see JUCE's Image.",
    "aloe-imagecomponent"              => "Displays images within a GUI component for easy embedding -- see JUCE's ImageComponent.",
    "aloe-interp"                      => "Interpolation utilities for parameter smoothing or real-time data changes -- see JUCE's DSP interpolation.",
    "aloe-ios-audio"                   => "Audio session handling and I/O on iOS devices -- see JUCE's iOS audio implementation.",
    "aloe-ios-camera"                  => "Camera capture and preview on iOS, including device selection -- see JUCE's iOS camera code.",
    "aloe-ios-notifications"           => "Local and push notifications on iOS devices -- see JUCE's iOS notification integration.",
    "aloe-jpg"                         => "JPEG image encoding and decoding with adjustable quality -- see JUCE's JPEG handling.",
    "aloe-keyboard"                    => "Keyboard events, shortcuts, and focus management -- see JUCE's keyboard handling.",
    "aloe-keymapping-editor"           => "GUI editor for mapping keyboard shortcuts to application commands -- see JUCE's KeyMappingEditor.",
    "aloe-label"                       => "Static or editable text labels for GUIs -- see JUCE's Label component.",
    "aloe-ladspa"                      => "LADSPA plugin format support for Linux audio processing -- see JUCE's LADSPA integration.",
    "aloe-lasso"                       => "Lasso selection tools for grouping items in a UI -- see JUCE's LassoComponent.",
    "aloe-level-meter"                 => "Audio level metering with dynamic range -- see JUCE's level meter components.",
    "aloe-listbox"                     => "Scrolling list or table interface for data display -- see JUCE's ListBox / TableListBox.",
    "aloe-live-constant-editor"        => "Real-time editing of constants or parameters for debugging -- see JUCE's live coding demos.",
    "aloe-log"                         => "Logging and diagnostic output for debug builds -- see JUCE's Logger class.",
    "aloe-lookandfeel"                 => "Theming and skinning for UI components with override hooks -- see JUCE's LookAndFeel.",
    "aloe-mac-camera"                  => "Camera access and capture on macOS -- see JUCE's macOS camera bridging.",
    "aloe-mac-notifications"           => "User notifications on macOS with local or remote triggers -- see JUCE's macOS notifications.",
    "aloe-mac-video"                   => "Video playback and rendering on macOS using system libraries -- see JUCE's macOS video code.",
    "aloe-math"                        => "Foundational math functions and numeric extensions for DSP or geometry -- see JUCE's math expansions.",
    "aloe-math-expression"             => "Runtime parsing and evaluation of math expressions -- see JUCE's Expression class.",
    "aloe-memory"                      => "Memory allocation and reference counting utilities -- see JUCE's memory management classes.",
    "aloe-menus"                       => "Menus and menu bar components with hierarchical items -- see JUCE's MenuBarModel and PopupMenu.",
    "aloe-midi"                        => "MIDI input/output and message parsing for real-time control -- see JUCE's MIDI handling.",
    "aloe-mime"                        => "MIME type identification and content handling for data transfer -- see JUCE's MIME support.",
    "aloe-mixer"                       => "Audio mixing of multiple sources into one output stream -- see JUCE's mixer approach.",
    "aloe-mouse"                       => "Mouse input events, states, and hit-testing for components -- see JUCE's mouse handling.",
    "aloe-mp3"                         => "MP3 file reading and writing, including metadata -- see JUCE's MP3 codec support.",
    "aloe-mpe"                         => "MIDI Polyphonic Expression (MPE) for advanced MIDI control -- see JUCE's MPE classes.",
    "aloe-multiband"                   => "Multi-band splitting and processing of audio signals -- see JUCE's multi-band DSP examples.",
    "aloe-multidoc"                    => "Multiple document interface for editing or viewing multiple files -- see JUCE's MultiDocumentPanel.",
    "aloe-network"                     => "Sockets, HTTP, and other network utilities for data exchange -- see JUCE's networking layer.",
    "aloe-notifications"               => "Platform-agnostic façade for sending system notifications -- see JUCE's notifications abstraction.",
    "aloe-nsview"                      => "Wrapping NSView objects in an Aloe component for macOS -- see JUCE's NSView embedding.",
    "aloe-oboe"                        => "Oboe-based audio I/O for Android with low-latency features -- see JUCE's Oboe integration approach.",
    "aloe-oboe-audio-loader"           => "Audio file loading and decoding for Oboe-based pipelines -- see JUCE's audio loader logic.",
    "aloe-oboe-audioclock"             => "Audio clock synchronization across Oboe streams -- see JUCE's DSP clock management.",
    "aloe-oboe-audioio"                => "Core audio I/O wrappers bridging Oboe with the Aloe audio model -- see JUCE's Oboe device usage.",
    "aloe-oboe-core"                   => "Essential building blocks for Android's Oboe integration crates -- see JUCE's Oboe support.",
    "aloe-oboe-counters"               => "Performance counters and metrics in Oboe-driven audio code -- see JUCE's debugging facilities.",
    "aloe-oboe-devicequirks"           => "Vendor-specific or device-specific Oboe quirks for stable audio -- see JUCE's hardware quirks.",
    "aloe-oboe-extensions"             => "Additional expansions for Oboe audio pipelines beyond core APIs -- see JUCE's Oboe extension modules.",
    "aloe-oboe-fifo"                   => "Lock-free ring buffers in Oboe contexts for real-time audio -- see JUCE's FIFO approach.",
    "aloe-oboe-fixedblockrw"           => "Fixed-size block reading/writing for glitch-free audio -- see JUCE's real-time block patterns.",
    "aloe-oboe-flowgraph"              => "Flow graph for chaining Oboe audio nodes in a processing pipeline -- see JUCE's AudioProcessorGraph.",
    "aloe-oboe-flowgraph-converter"    => "Sample format/rate conversion nodes in Oboe flow graphs -- see JUCE's audio format converter.",
    "aloe-oboe-flowgraph-filter"       => "Filtering nodes for Oboe-based audio pipelines -- see JUCE's filter classes.",
    "aloe-oboe-flowgraph-node"         => "Core node trait for graph-based Oboe audio processing -- see JUCE's audio node concept.",
    "aloe-oboe-flowgraph-resampler"    => "Real-time resampling for audio streams in the Oboe graph -- see JUCE's resampling utilities.",
    "aloe-oboe-flowgraph-sink"         => "Routing audio output to a sink node in the Oboe pipeline -- see JUCE's audio output endpoints.",
    "aloe-oboe-flowgraph-source"       => "Providing input sources (mics, files) within an Oboe flow graph -- see JUCE's audio source design.",
    "aloe-oboe-latencytuner"           => "Automated latency tuning for Oboe streams to reduce buffers -- see JUCE's latency management.",
    "aloe-oboe-no-aaudio"              => "Fallback for devices missing AAudio support -- see JUCE's alternative paths on older Android.",
    "aloe-oboe-session"                => "Managing Oboe audio session states, including start/stop -- see JUCE's session model.",
    "aloe-oboe-sles"                   => "Wrapping OpenSL ES audio paths on older Android devices -- see JUCE's OpenSL ES fallback.",
    "aloe-oboe-sourcefloatcaller"      => "Floating-point audio callbacks in Oboe pipelines -- see JUCE's real-time callback bridging.",
    "aloe-oboe-stream"                 => "Encapsulation of an Oboe stream for reading/writing audio -- see JUCE's AudioIODevice streams.",
    "aloe-oboe-trace"                  => "Debug tracing and logging for Oboe operations -- see JUCE's audio debugging approach.",
    "aloe-ogg"                         => "OGG Vorbis file I/O for compressed audio streams -- see JUCE's OGG support.",
    "aloe-opengl"                      => "OpenGL context and GPU-accelerated rendering for GUIs -- see JUCE's OpenGL module.",
    "aloe-osc"                         => "Open Sound Control protocol for network-based communication -- see JUCE's OSC implementation.",
    "aloe-oscillator"                  => "Waveform generation (sine, saw, square) for synth or LFO usage -- see JUCE's Oscillator DSP.",
    "aloe-oversampling"                => "Oversampling utilities to reduce aliasing in audio processors -- see JUCE's Oversampling classes.",
    "aloe-panner"                      => "Stereo or multichannel panning for audio signals -- see JUCE's panning DSP code.",
    "aloe-param"                       => "Typed audio parameters for automation and UI binding -- see JUCE's AudioParameter classes.",
    "aloe-parameter-component"         => "Linking UI controls to parameter objects for real-time updates -- see JUCE's ParameterAttachment.",
    "aloe-parameter-type"              => "Parameter variants (float, int, choice) for flexible plugin controls -- see JUCE's AudioParameter types.",
    "aloe-performance-counter"         => "Real-time performance metrics for profiling audio or UI code -- see JUCE's performance counters.",
    "aloe-phaser"                      => "Phaser audio effect with modulated all-pass filters -- see JUCE's DSP phaser code.",
    "aloe-player"                      => "Basic audio player with start/stop/seek functionality -- see JUCE's AudioAppComponent usage.",
    "aloe-playhead"                    => "Tracking playback position and timeline for synchronization -- see JUCE's AudioPlayHead.",
    "aloe-plugin-demo"                 => "Simple audio plugin demo crate showcasing effect processing -- see JUCE's audio plugin demo.",
    "aloe-positioning"                 => "Absolute and relative component positioning and layout rules -- see JUCE's UI positioning system.",
    "aloe-processor-chain"             => "Chaining multiple audio processors in sequence for complex effects -- see JUCE's ProcessorChain.",
    "aloe-progressbar"                 => "Visual representation of background tasks with a progress indicator -- see JUCE's ProgressBar.",
    "aloe-properties"                  => "Storing and persisting key-value data across sessions -- see JUCE's PropertiesFile system.",
    "aloe-random"                      => "Random number generation with customizable seeds -- see JUCE's Random class.",
    "aloe-resizable"                   => "Resizing corners and borders for GUI components -- see JUCE's ResizableCornerComponent.",
    "aloe-reverb"                      => "Reverb effect for simulating acoustic spaces -- see JUCE's Reverb classes.",
    "aloe-rtas"                        => "RTAS plugin development for legacy Pro Tools support -- see JUCE's RTAS module.",
    "aloe-sample-type"                 => "Audio sample abstractions for float, double, or other data formats -- see JUCE's flexible sample approach.",
    "aloe-scanning"                    => "Discovering and validating audio plugins -- see JUCE's plugin scanning code.",
    "aloe-script"                      => "Lightweight scripting or property evaluation for dynamic behavior -- see JUCE's scripting capabilities.",
    "aloe-scrollbar"                   => "Vertical or horizontal scroll bars for large content areas -- see JUCE's ScrollBar class.",
    "aloe-selection"                   => "Selection models for multiple items in lists or components -- see JUCE's selection tracking.",
    "aloe-shadow"                      => "Applying drop shadows to components with adjustable offsets -- see JUCE's DropShadower.",
    "aloe-sidepanel"                   => "Collapsible side panel for extended UI sections -- see JUCE's SidePanel component.",
    "aloe-simd"                        => "Base SIMD operations for optimized DSP tasks -- see JUCE's SIMD expansions.",
    "aloe-simd-avx"                    => "AVX intrinsic support for x86_64 DSP acceleration -- see JUCE's AVX usage.",
    "aloe-simd-complex"                => "Complex-number extensions to base SIMD operations -- see JUCE's complex DSP expansions.",
    "aloe-simd-core"                   => "Central SIMD traits and macros for consistent intrinsics usage -- see JUCE's SIMD design.",
    "aloe-simd-deps"                   => "Third-party or vendor code needed for SIMD acceleration -- see JUCE's internal DSP bundles.",
    "aloe-simd-fallback"               => "Scalar fallback for devices or builds lacking SIMD instructions -- see JUCE's safe fallback logic.",
    "aloe-simd-native"                 => "Dynamic detection of best available SIMD instruction set -- see JUCE's runtime CPU features.",
    "aloe-simd-neon"                   => "Neon intrinsics for ARM-based devices (mobile, embedded) -- see JUCE's Neon optimizations.",
    "aloe-simd-register"               => "Register-level abstraction for vector data operations -- see JUCE's DSP register handling.",
    "aloe-simd-register-demo"          => "Demo showing aloe-simd-register usage for real-time DSP -- see JUCE's SIMD demos.",
    "aloe-slider"                      => "GUI slider controls (linear, rotary) with value readout -- see JUCE's Slider.",
    "aloe-smoothed-value"              => "Parameter smoothing with ramped updates over time -- see JUCE's SmoothedValue.",
    "aloe-splash"                      => "Splash screen at application startup -- see JUCE's SplashScreen.",
    "aloe-standalone"                  => "Standalone app or plugin wrapper for audio testing -- see JUCE's Standalone plugin code.",
    "aloe-streams"                     => "I/O streams for files, memory buffers, or network data -- see JUCE's InputStream/OutputStream.",
    "aloe-stretchable"                 => "Stretchable layout bars letting users resize child components -- see JUCE's StretchableLayoutManager.",
    "aloe-string"                      => "UTF-8 string handling with reference counting or copy-on-write -- see JUCE's String class.",
    "aloe-surround"                    => "Surround sound handling for multichannel audio -- see JUCE's surround expansions.",
    "aloe-svg"                         => "SVG vector image rendering at scalable resolutions -- see JUCE's SVG support.",
    "aloe-synthesizer"                 => "Polyphonic synthesizer framework with voices and sound generation -- see JUCE's Synthesiser classes.",
    "aloe-system"                      => "System-level functionality such as environment checks and CPU info -- see JUCE's SystemStats.",
    "aloe-system-tray"                 => "System tray icons and balloon tips for notifications -- see JUCE'sSystemTrayIconComponent.",
    "aloe-tabbed"                      => "Tab-based container for multiple views in one window -- see JUCE's TabbedComponent.",
    "aloe-table"                       => "Tabular data display with optional editing cells -- see JUCE's TableListBox.",
    "aloe-test"                        => "Unit tests and integration tests for overall Aloe functionality -- see JUCE's test harness approach.",
    "aloe-text"                        => "Text rendering and layout engine for rich or styled text -- see JUCE's TextLayout classes.",
    "aloe-texteditor"                  => "Single- or multi-line text editor component with selection and undo -- see JUCE's TextEditor.",
    "aloe-thread-with-progress-window" => "Background thread execution with a progress-bar window -- see JUCE's ThreadWithProgressWindow.",
    "aloe-threads"                     => "Threading abstractions (thread pools, waitable events) for concurrency -- see JUCE's threading API.",
    "aloe-time"                        => "Timekeeping, scheduling, and clock functions for timed operations -- see JUCE's Time/Timer classes.",
    "aloe-toolbar"                     => "Toolbar components with draggable items and customization -- see JUCE's Toolbar classes.",
    "aloe-tooltip-window"              => "Hover-based tooltips for components, automatically displayed -- see JUCE's TooltipWindow.",
    "aloe-touch"                       => "Multi-touch gesture handling across supported touch devices -- see JUCE's touch input system.",
    "aloe-transport"                   => "Playback transport coordination for audio engines, controlling position and state -- see JUCE's AudioTransport.",
    "aloe-treeview"                    => "Hierarchical data view with expand/collapse items -- see JUCE's TreeView.",
    "aloe-undo"                        => "Undo/redo stack for editing operations in GUIs or audio -- see JUCE's UndoManager.",
    "aloe-unity"                       => "Bridging with Unity for game-engine or plugin usage -- see JUCE's cross-platform game dev expansions.",
    "aloe-unlocking"                   => "Software unlocking/licensing flow for paid features or evaluation -- see JUCE's licensing modules.",
    "aloe-url"                         => "URL parsing and HTTP request handling for network resources -- see JUCE's URL class.",
    "aloe-uuid"                        => "Unique identifier generation for objects or sessions -- see JUCE's UUID class.",
    "aloe-valuetree"                   => "Hierarchical data storage and change listeners via ValueTrees -- see JUCE's ValueTree.",
    "aloe-variant"                     => "Variant data type holding different value types in one container -- see JUCE's var class.",
    "aloe-video"                       => "Cross-platform video playback engine for common formats -- see JUCE's native video layers.",
    "aloe-viewport"                    => "Scrollable viewport for displaying larger content within a smaller area -- see JUCE's Viewport.",
    "aloe-visualizer"                  => "Real-time waveform or spectral display for audio data -- see JUCE's AudioVisualiserComponent.",
    "aloe-vst"                         => "Steinberg VST plugin support for cross-DAW compatibility -- see JUCE's VST module.",
    "aloe-vst-attributes"              => "Additional parameter attributes and metadata for VST plugins -- see JUCE's VST attribute definitions.",
    "aloe-vst-buffer"                  => "Audio buffer handling logic in VST processing callbacks -- see JUCE's VST buffer code.",
    "aloe-vst-channel"                 => "Channel configuration and layout for VST plugins -- see JUCE's VST channel logic.",
    "aloe-vst-component"               => "Core VST Component interface bridging host and plugin -- see JUCE's VST component code.",
    "aloe-vst-debug"                   => "Debugging aids for Steinberg VST plugin development -- see JUCE's VST debug approach.",
    "aloe-vst-edit"                    => "GUI editing layer for VST plugins, connecting host windows -- see JUCE's VST editor code.",
    "aloe-vst-events"                  => "MIDI and control events in the VST plugin environment -- see JUCE's VST event handling.",
    "aloe-vst-host"                    => "Framework for hosting VST plugins, scanning and loading them at runtime -- see JUCE's VST hosting.",
    "aloe-vst-inter-app"               => "Inter-app audio or bridging functionalities for VST-based workflows -- see JUCE's advanced plugin bridging.",
    "aloe-vst-message"                 => "Message passing system between VST modules -- see JUCE's VST message handling.",
    "aloe-vst-midi"                    => "VST-specific MIDI event handling and conversion -- see JUCE's VST MIDI integration.",
    "aloe-vst-note-expression"         => "VST Note Expression support for polyphonic control -- see JUCE's advanced note expression API.",
    "aloe-vst-parameters"              => "Parameter objects with automation hooks in VST plugins -- see JUCE's VST parameter classes.",
    "aloe-vst-persist"                 => "Plugin state persistence (save/load) for VST plugins -- see JUCE's VST chunk management.",
    "aloe-vst-platform"                => "Platform-specific code for VST bridging on different OSes -- see JUCE's cross-platform VST approach.",
    "aloe-vst-plugin"                  => "Top-level VST plugin class bridging to the host API -- see JUCE's VST plugin scaffolding.",
    "aloe-vst-plugin-client-vst"       => "Focus on Steinberg VST2 plugin client creation and hosting -- see JUCE's VST2 bridging.",
    "aloe-vst-plugin-client-vst3"      => "Steinberg VST3 client integration for next-gen plugin features -- see JUCE's VST3 bridging.",
    "aloe-vst-pluginformat"            => "Unified interface for scanning and instantiating VST plugins -- see JUCE's VST plugin format code.",
    "aloe-vst-plugview"                => "Rendering of the VST GUI view in a host-provided window -- see JUCE's plug-in view approach.",
    "aloe-vst-presetfile"              => "VST preset file import/export for user or DAW presets -- see JUCE's preset file management.",
    "aloe-vst-processor"               => "Audio processing callbacks for VST plugins integrated into the DAW engine -- see JUCE's AudioProcessor in VST.",
    "aloe-vst-reaper"                  => "REAPER-specific VST features or workarounds for better integration -- see JUCE's DAW-specific expansions.",
    "aloe-vst-speaker"                 => "Speaker arrangement definitions for VST-based projects -- see JUCE's speaker channel macros.",
    "aloe-vst-stream"                  => "Data streaming in and out of VST plugins for custom processing -- see JUCE's VST stream approach.",
    "aloe-vst-string"                  => "String conversions for ASCII or UTF-16 in VST APIs -- see JUCE's VST string bridging.",
    "aloe-vst-thread"                  => "Threading constraints and message passing in VST contexts -- see JUCE's VST threading code.",
    "aloe-vst-types"                   => "Enumerations and constants for Steinberg VST compliance -- see JUCE's internal VST definitions.",
    "aloe-vst-units"                   => "Parameter unit conversion in VST for consistent user displays -- see JUCE's unit-based parameter logic.",
    "aloe-vst3"                        => "Steinberg VST3 plugin adaptation with advanced note expression -- see JUCE's VST3 module.",
    "aloe-wav"                         => "Reading and writing WAV files with metadata and chunk support -- see JUCE's WAV handling.",
    "aloe-waveshaper"                  => "Nonlinear waveshaping for distortion or saturation effects -- see JUCE's DSP waveshaper.",
    "aloe-webbrowser"                  => "Embedded web browser component for in-app HTML rendering -- see JUCE's WebBrowserComponent.",
    "aloe-windowing"                   => "Creation and management of top-level windows, sizing, and event loops -- see JUCE's native window classes.",
    "aloe-x11"                         => "X11-based windowing and event management on Linux -- see JUCE's X11 integration.",
    "aloe-xembed"                      => "Embedding external X11 apps inside an Aloe window using XEmbed -- see JUCE's XEmbed support.",
    "aloe-xml"                         => "XML parsing and generation for configuration or data storage -- see JUCE's XML classes.",
    "aloe-zip"                         => "ZIP archiving and extraction for bundling multiple files -- see JUCE's ZIP file utilities.",
);

sub ensure-authors-correct-in-crate-toml($crate, $description) {
    my $toml-file = "$crate/Cargo.toml";

    say "Ensuring authors correct in TOML for $toml-file";

    my %toml = from-toml($toml-file.IO.slurp);
    %toml<package><authors>        = [ "klebs <tpk3.mx@gmail.com>" ];
    %toml<package><categories>     = ["gui", "graphics", "hardware-support"];
    %toml<package><description>    = $description; # Insert the crate-specific description
    %toml<package><documentation>  = "https://docs.rs/$crate";
    %toml<package><edition>        = "2024";
    %toml<package><keywords>       = ["juce", "audio", "gui", "graphics", "listener"];
    %toml<package><license>        = "GPL-3.0";
    %toml<package><name>           = $crate;
    %toml<package><readme>         = "README.md";
    %toml<package><repository>     = "https://github.com/klebs6/aloe-rs";
    %toml<package><version>        = "0.1.0";

    %toml<package><metadata> = {
        'cpp-authors'    => @cpp-authors,
        'original-repo'  => $original-repo
    };

    $toml-file.IO.spurt: to-toml(%toml);
}

# Iterate over the hash, updating each crate's Cargo.toml
race for %crates-and-description.kv -> $crate, $description {
    ensure-authors-correct-in-crate-toml($crate, $description);
}
