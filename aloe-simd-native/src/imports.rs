pub(crate) use aloe_derive::*;
pub(crate) use aloe_deps::*;
pub(crate) use core::mem;

#[cfg(target_arch = "x86_64")]  
pub(crate) use std::arch::x86_64::{
    _MM_FROUND_TO_NEAREST_INT,
    _MM_FROUND_TO_ZERO,
    __m128,
    __m128d,
    __m128i,
    _mm_add_epi16,
    _mm_add_epi32,
    _mm_add_epi64,
    _mm_add_epi8,
    _mm_add_pd,
    _mm_add_ps,
    _mm_and_pd,
    _mm_and_ps,
    _mm_and_si128,
    _mm_andnot_pd,
    _mm_andnot_ps,
    _mm_andnot_si128,
    _mm_castsi128_pd,
    _mm_ceil_pd,
    _mm_cmpeq_epi16,
    _mm_cmpeq_epi32,
    _mm_cmpeq_epi64,
    _mm_cmpeq_epi8,
    _mm_cmpeq_pd,
    _mm_cmpeq_ps,
    _mm_cmpge_pd,
    _mm_cmpge_ps,
    _mm_cmpgt_epi16,
    _mm_cmpgt_epi32,
    _mm_cmpgt_epi64,
    _mm_cmpgt_epi8,
    _mm_cmpgt_pd,
    _mm_cmpgt_ps,
    _mm_cmple_pd,
    _mm_cmplt_pd,
    _mm_cmpneq_pd,
    _mm_cmpneq_ps,
    _mm_cvtsi128_si32,
    _mm_cvtss_f32,
    _mm_div_pd,
    _mm_floor_pd,
    _mm_hadd_epi16,
    _mm_hadd_epi32,
    _mm_hadd_ps,
    _mm_load1_ps,
    _mm_load_ps,
    _mm_load_si128,
    _mm_loadu_pd,
    _mm_loadu_si128,
    _mm_max_epi16,
    _mm_max_pd,
    _mm_max_ps,
    _mm_min_epi16,
    _mm_min_pd,
    _mm_min_ps,
    _mm_movemask_epi8,
    _mm_movemask_ps,
    _mm_mul_epu32,
    _mm_mul_pd,
    _mm_mul_ps,
    _mm_mullo_epi16,
    _mm_or_pd,
    _mm_or_ps,
    _mm_or_si128,
    _mm_round_pd,
    _mm_set1_epi16,
    _mm_set1_epi32,
    _mm_set1_epi64x,
    _mm_set1_epi8,
    _mm_set1_pd,
    _mm_set1_ps,
    _mm_shuffle_epi32,
    _mm_shuffle_ps,
    _mm_slli_epi16,
    _mm_sqrt_pd,
    _mm_srli_epi16,
    _mm_srli_si128,
    _mm_store_ps,
    _mm_store_si128,
    _mm_storeu_pd,
    _mm_storeu_si128,
    _mm_sub_epi16,
    _mm_sub_epi32,
    _mm_sub_epi64,
    _mm_sub_epi8,
    _mm_sub_pd,
    _mm_sub_ps,
    _mm_unpacklo_epi32,
    _mm_xor_pd,
    _mm_xor_ps,
    _mm_xor_si128,
};
