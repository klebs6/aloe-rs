/*!
  | \file include/FLAC/stream_decoder.h
  | 
  | -----------
  | @brief
  | 
  | This module contains the functions
  | which implement the stream decoder.
  | 
  | See the detailed documentation in the
  | \link flac_stream_decoder stream
  | decoder \endlink module.
  |
  */

crate::ix!();

//-------------------------------------------[.cpp/Aloe/modules/aloe_audio_formats/codecs/flac/stream_decoder.h]

/** 
 | Possible values passed back to the
 | StreamDecoder error callback. \c
 | STREAM_DECODER_ERROR_STATUS_LOST_SYNC is
 | the generic catch- all. The rest could be
 | caused by bad sync (false synchronization on
 | data that is not the start of a frame) or
 | corrupted data. The error itself is the
 | decoder's best guess at what happened assuming
 | a correct sync. For example \c
 | STREAM_DECODER_ERROR_STATUS_BAD_HEADER
 | could be caused by a correct sync on the start
 | of a frame, but some data in the frame header
 | was corrupted. Or it could be the result of
 | syncing on a point the stream that looked like
 | the starting of a frame but was not. \c
 | STREAM_DECODER_ERROR_STATUS_UNPARSEABLE_STREAM
 | could be because the decoder encountered
 | a valid frame made by a future version of the
 | encoder which it cannot parse, or because of
 | a false sync making it appear as though an
 | encountered frame was generated by a future
 | encoder.
 |
 */
pub enum StreamDecoderErrorStatus {

    /**
      | An error in the stream caused the decoder
      | to lose synchronization.
      |
      */
    LostSync,

    /**
      | The decoder encountered a corrupted
      | frame header.
      |
      */
    BadHeader,

    /**
      | The frame's data did not match the CRC
      | in the footer.
      |
      */
    FrameCrcMismatch,

    /**
      | The decoder encountered reserved fields
      | in use in the stream.
      |
      */
    UnparseableStream
}

/**
  | State values for a StreamDecoder
  | 
  | The decoder's state can be obtained
  | by calling stream_decoder_get_state().
  |
  */
pub enum StreamDecoderState {

    /**
      | The decoder is ready to search for metadata.
      |
      */
    SearchForMetadata = 0,

    /**
      | The decoder is ready to or is in the process
      | of reading metadata.
      |
      */
    ReadMetadata,

    /**
      | The decoder is ready to or is in the process
      | of searching for the frame sync code.
      |
      */
    SearchForFrameSync,

    /**
      | The decoder is ready to or is in the process
      | of reading a frame.
      |
      */
    ReadFrame,

    /**
      | The decoder has reached the end of the
      | stream.
      |
      */
    EndOfStream,

    /**
      | An error occurred in the underlying
      | Ogg layer.
      |
      */
    OggError,

    /**
      | An error occurred while seeking. The
      | decoder must be flushed with stream_decoder_flush()
      | or reset with
      | 
      | stream_decoder_reset() before
      | decoding can continue.
      |
      */
    SeekError,

    /**
      | The decoder was aborted by the read callback.
      |
      */
    Aborted,

    /**
      | An error occurred allocating memory.
      | The decoder is in an invalid state and
      | can no longer be used.
      |
      */
    MemoryAllocationError,

    /**
      | The decoder is in the uninitialized
      | state; one of the
      | 
      | stream_decoder_init_*() functions
      | must be called before samples can be
      | processed.
      |
      */
    Uninitialized
}


/**
  | Possible return values for the stream_decoder_init_*()
  | functions.
  |
  */
pub enum StreamDecoderInitStatus {

    /**
      | Initialization was successful.
      |
      */
    Ok = 0,

    /**
      | The library was not compiled with support
      | for the given container format.
      |
      */
    UnsupportedContainer,

    /**
      | A required callback was not supplied.
      |
      */
    InvalidCallbacks,

    /**
      | An error occurred allocating memory.
      |
      */
    MemoryAllocationError,

    /**
      | fopen() failed in stream_decoder_init_file()
      | or
      | 
      | stream_decoder_init_ogg_file().
      |
      */
    ErrorOpeningFile,

    /**
      | stream_decoder_init_*() was
      | called when the decoder was already
      | initialized, usually because
      | 
      | stream_decoder_finish() was
      | not called.
      |
      */
    AlreadyInitialized
}

/**
  | Return values for the StreamDecoder
  | read callback.
  |
  */
pub enum StreamDecoderReadStatus {

    /**
      | The read was OK and decoding can continue.
      |
      */
    Continue,

    /**
      | The read was attempted while at the end
      | of the stream. Note that the client must
      | only return this value when the read
      | callback was called when already at
      | the end of the stream. Otherwise, if
      | the read itself moves to the end of the
      | stream, the client should still return
      | the data and \c STREAM_DECODER_READ_STATUS_CONTINUE,
      | and then on the next read callback it
      | should return \c STREAM_DECODER_READ_STATUS_END_OF_STREAM
      | with a byte count of \c 0.
      |
      */
    EndOfStream,

    /**
      | An unrecoverable error occurred. The
      | decoder will return from the process
      | call.
      |
      */
    Abort
}

/**
  | Return values for the StreamDecoder
  | seek callback.
  |
  */
pub enum StreamDecoderSeekStatus {

    /**
      | The seek was OK and decoding can continue.
      |
      */
    Ok,

    /**
      | An unrecoverable error occurred. The
      | decoder will return from the process
      | call.
      |
      */
    Error,

    /**
      | Client does not support seeking.
      |
      */
    Unsupported
}

/**
  | Return values for the StreamDecoder
  | tell callback.
  |
  */
pub enum StreamDecoderTellStatus {

    /**
      | The tell was OK and decoding can continue.
      |
      */
    Ok,

    /**
      | An unrecoverable error occurred. The
      | decoder will return from the process
      | call.
      |
      */
    Error,

    /**
      | Client does not support telling the
      | position.
      |
      */
    Unsupported
}

/**
  | Return values for the StreamDecoder
  | length callback.
  |
  */
pub enum StreamDecoderLengthStatus {

    /**
      | The length call was OK and decoding can
      | continue.
      |
      */
    Ok,

    /**
      | An unrecoverable error occurred. The
      | decoder will return from the process
      | call.
      |
      */
    Error,

    /**
      | Client does not support reporting the
      | length.
      |
      */
    Unsupported
}

/**
  | Return values for the StreamDecoder
  | write callback.
  |
  */
pub enum StreamDecoderWriteStatus {

    /**
      | The write was OK and decoding can continue.
      |
      */
    Continue,

    /**
      | An unrecoverable error occurred. The
      | decoder will return from the process
      | call.
      |
      */
    Abort
}

pub struct StreamDecoderProtected {}
pub struct StreamDecoderPrivate   {}

/**
  | The opaque structure definition for
  | the stream decoder type.
  | 
  | See the \link flac_stream_decoder
  | stream decoder module \endlink for
  | a detailed description.
  |
  */
pub struct StreamDecoder {

    /**
      | avoid the C++ keyword 'protected'
      |
      */
    protected: *mut StreamDecoderProtected,


    /**
      | avoid the C++ keyword 'private'
      |
      */
    private:   *mut StreamDecoderPrivate,
}

/**
  | Signature for the read callback.
  | 
  | A function pointer matching this signature
  | must be passed to
  | 
  | stream_decoder_init*_stream().
  | The supplied function will be called
  | when the decoder needs more input data.
  | The address of the buffer to be filled
  | is supplied, along with the number of
  | bytes the buffer can hold. The callback
  | may choose to supply less data and modify
  | the byte count but must be careful not
  | to overflow the buffer.
  | 
  | The callback then returns a status code
  | chosen from
  | 
  | StreamDecoderReadStatus.
  | 
  | Here is an example of a read callback
  | for stdio streams:
  | 
  | -----------
  | @note
  | 
  | In general, StreamDecoder functions
  | which change the state should not be
  | called on the \a decoder while in the
  | callback.
  | 
  | -----------
  | @param decoder
  | 
  | The decoder instance calling the callback.
  | ----------
  | @param buffer
  | 
  | A pointer to a location for the callee
  | to store data to be decoded.
  | ----------
  | @param bytes
  | 
  | A pointer to the size of the buffer. On
  | entry to the callback, it contains the
  | maximum number of bytes that may be stored
  | in \a buffer. The callee must set it to
  | the actual number of bytes stored (0
  | in case of error or end-of-stream) before
  | returning.
  | ----------
  | @param client_data
  | 
  | The callee's client data set through
  | 
  | stream_decoder_init_*().
  | 
  | -----------
  | @code
  | 
  | StreamDecoderReadStatus read_cb(const StreamDecoder *decoder, byte buffer[], size_t *bytes, void *client_data)
  | {
  |   FILE *file = ((MyClientData*)client_data)->file;
  |   if(*bytes > 0) {
  |     *bytes = fread(buffer, sizeof(byte), *bytes, file);
  |     if(ferror(file))
  |       return STREAM_DECODER_READ_STATUS_ABORT;
  |     else if(*bytes == 0)
  |       return STREAM_DECODER_READ_STATUS_END_OF_STREAM;
  |     else
  |       return STREAM_DECODER_READ_STATUS_CONTINUE;
  |   }
  |   else
  |     return STREAM_DECODER_READ_STATUS_ABORT;
  | }
  | 
  | -----------
  | @return
  | 
  | StreamDecoderReadStatus
  | 
  | The callee's return status. Note that
  | the callback should return \c STREAM_DECODER_READ_STATUS_END_OF_STREAM
  | if and only if zero bytes were read and
  | there is no more data to be read.
  |
  */
pub type StreamDecoderReadCallback = fn(
        decoder:     *const StreamDecoder,
        buffer:      &[u8],
        bytes:       *mut usize,
        client_data: *mut c_void
) -> StreamDecoderReadStatus;

/**
  | Signature for the seek callback.
  | 
  | A function pointer matching this signature
  | may be passed to
  | 
  | stream_decoder_init*_stream().
  | The supplied function will be called
  | when the decoder needs to seek the input
  | stream. The decoder will pass the absolute
  | byte offset to seek to, 0 meaning the
  | beginning of the stream.
  | 
  | Here is an example of a seek callback
  | for stdio streams:
  | 
  | -----------
  | @note
  | 
  | In general, StreamDecoder functions
  | which change the state should not be
  | called on the \a decoder while in the
  | callback.
  | 
  | -----------
  | @param decoder
  | 
  | The decoder instance calling the callback.
  | ----------
  | @param absolute_byte_offset
  | 
  | The offset from the beginning of the
  | stream to seek to.
  | ----------
  | @param client_data
  | 
  | The callee's client data set through
  | 
  | stream_decoder_init_*().
  | 
  | -----------
  | @code
  | 
  | StreamDecoderSeekStatus seek_cb(const StreamDecoder *decoder, u64 absolute_byte_offset, void *client_data)
  | {
  |   FILE *file = ((MyClientData*)client_data)->file;
  |   if(file == stdin)
  |     return STREAM_DECODER_SEEK_STATUS_UNSUPPORTED;
  |   else if(fseeko(file, (off_t)absolute_byte_offset, SEEK_SET) < 0)
  |     return STREAM_DECODER_SEEK_STATUS_ERROR;
  |   else
  |     return STREAM_DECODER_SEEK_STATUS_OK;
  | }
  | 
  | -----------
  | @return
  | 
  | StreamDecoderSeekStatus
  | 
  | The callee's return status.
  |
  */
pub type StreamDecoderSeekCallback = fn(
    decoder:              *const StreamDecoder,
    absolute_byte_offset: u64,
    client_data:          *mut c_void
) -> StreamDecoderSeekStatus;

/**
  | Signature for the tell callback.
  | 
  | A function pointer matching this signature
  | may be passed to
  | 
  | stream_decoder_init*_stream().
  | The supplied function will be called
  | when the decoder wants to know the current
  | position of the stream. The callback
  | should return the byte offset from the
  | beginning of the stream.
  | 
  | Here is an example of a tell callback
  | for stdio streams:
  | 
  | -----------
  | @note
  | 
  | In general, StreamDecoder functions
  | which change the state should not be
  | called on the \a decoder while in the
  | callback.
  | 
  | -----------
  | @param decoder
  | 
  | The decoder instance calling the callback.
  | ----------
  | @param absolute_byte_offset
  | 
  | A pointer to storage for the current
  | offset from the beginning of the stream.
  | ----------
  | @param client_data
  | 
  | The callee's client data set through
  | 
  | stream_decoder_init_*().
  | 
  | -----------
  | @code
  | 
  | StreamDecoderTellStatus tell_cb(const StreamDecoder *decoder, u64 *absolute_byte_offset, void *client_data)
  | {
  |   FILE *file = ((MyClientData*)client_data)->file;
  |   off_t pos;
  |   if(file == stdin)
  |     return STREAM_DECODER_TELL_STATUS_UNSUPPORTED;
  |   else if((pos = ftello(file)) < 0)
  |     return STREAM_DECODER_TELL_STATUS_ERROR;
  |   else {
  |     *absolute_byte_offset = (u64)pos;
  |     return STREAM_DECODER_TELL_STATUS_OK;
  |   }
  | }
  | 
  | -----------
  | @return
  | 
  | StreamDecoderTellStatus
  | 
  | The callee's return status.
  |
  */
pub type StreamDecoderTellCallback = fn(
        decoder:              *const StreamDecoder,
        absolute_byte_offset: *mut u64,
        client_data:          *mut c_void
) -> StreamDecoderTellStatus;

/**
  | Signature for the length callback.
  | 
  | A function pointer matching this signature
  | may be passed to
  | 
  | stream_decoder_init*_stream().
  | The supplied function will be called
  | when the decoder wants to know the total
  | length of the stream in bytes.
  | 
  | Here is an example of a length callback
  | for stdio streams:
  | 
  | -----------
  | @note
  | 
  | In general, StreamDecoder functions
  | which change the state should not be
  | called on the \a decoder while in the
  | callback.
  | 
  | -----------
  | @param decoder
  | 
  | The decoder instance calling the callback.
  | ----------
  | @param stream_length
  | 
  | A pointer to storage for the length of
  | the stream in bytes.
  | ----------
  | @param client_data
  | 
  | The callee's client data set through
  | 
  | stream_decoder_init_*().
  | 
  | -----------
  | @code
  | 
  | StreamDecoderLengthStatus length_cb(const StreamDecoder *decoder, u64 *stream_length, void *client_data)
  | {
  |   FILE *file = ((MyClientData*)client_data)->file;
  |   struct stat filestats;
  |  
  |   if(file == stdin)
  |     return STREAM_DECODER_LENGTH_STATUS_UNSUPPORTED;
  |   else if(fstat(fileno(file), &filestats) != 0)
  |     return STREAM_DECODER_LENGTH_STATUS_ERROR;
  |   else {
  |     *stream_length = (u64)filestats.st_size;
  |     return STREAM_DECODER_LENGTH_STATUS_OK;
  |   }
  | }
  | 
  | -----------
  | @return
  | 
  | StreamDecoderLengthStatus
  | 
  | The callee's return status.
  |
  */
pub type StreamDecoderLengthCallback = fn(
        decoder:       *const StreamDecoder,
        stream_length: *mut u64,
        client_data:   *mut c_void
) -> StreamDecoderLengthStatus;

/**
  | Signature for the EOF callback.
  | 
  | A function pointer matching this signature
  | may be passed to
  | 
  | stream_decoder_init*_stream().
  | The supplied function will be called
  | when the decoder needs to know if the
  | end of the stream has been reached.
  | 
  | Here is an example of a EOF callback for
  | stdio streams:
  | 
  | bool eof_cb(const StreamDecoder
  | *decoder, void *client_data)
  | 
  | -----------
  | @note
  | 
  | In general, StreamDecoder functions
  | which change the state should not be
  | called on the \a decoder while in the
  | callback.
  | 
  | -----------
  | @param decoder
  | 
  | The decoder instance calling the callback.
  | ----------
  | @param client_data
  | 
  | The callee's client data set through
  | 
  | stream_decoder_init_*().
  | 
  | -----------
  | @code
  | 
  | {
  |   FILE *file = ((MyClientData*)client_data)->file;
  |   return feof(file)? true : false;
  | }
  | 
  | -----------
  | @return
  | 
  | bool \c true if the currently
  | at the end of the stream, else \c false.
  |
  */
pub type StreamDecoderEofCallback = fn(
    decoder:     *const StreamDecoder, 
    client_data: *mut c_void
) -> bool;

/**
  | Signature for the write callback.
  | 
  | A function pointer matching this signature
  | must be passed to one of the stream_decoder_init_*()
  | functions.
  | 
  | The supplied function will be called
  | when the decoder has decoded a single
  | audio frame. The decoder will pass the
  | frame metadata as well as an array of
  | pointers (one for each channel) pointing
  | to the decoded audio.
  | 
  | -----------
  | @note
  | 
  | In general, StreamDecoder functions
  | which change the state should not be
  | called on the \a decoder while in the
  | callback.
  | 
  | -----------
  | @param decoder
  | 
  | The decoder instance calling the callback.
  | ----------
  | @param frame
  | 
  | The description of the decoded frame.
  | See
  | 
  | Frame.
  | ----------
  | @param buffer
  | 
  | An array of pointers to decoded channels
  | of data.
  | 
  | Each pointer will point to an array of
  | signed samples of length \a frame->header.blocksize.
  | 
  | Channels will be ordered according
  | to the FLAC specification; see the documentation
  | for the <A HREF="../format.html#frame_header">frame
  | header</A>.
  | ----------
  | @param client_data
  | 
  | The callee's client data set through
  | 
  | stream_decoder_init_*().
  | 
  | -----------
  | @return
  | 
  | StreamDecoderWriteStatus
  | 
  | The callee's return status.
  |
  */
pub type StreamDecoderWriteCallback = fn(
        decoder:     *const StreamDecoder,
        frame:       *const Frame,
        buffer:      *const &[i32],
        client_data: *mut c_void
) -> StreamDecoderWriteStatus;

/**
  | Signature for the metadata callback.
  | 
  | A function pointer matching this signature
  | must be passed to one of the stream_decoder_init_*()
  | functions.
  | 
  | The supplied function will be called
  | when the decoder has decoded a metadata
  | block. In a valid FLAC file there will
  | always be one \c STREAMINFO block, followed
  | by zero or more other metadata blocks.
  | 
  | These will be supplied by the decoder
  | in the same order as they appear in the
  | stream and always before the first audio
  | frame (i.e. write callback). The metadata
  | block that is passed in must not be modified,
  | and it doesn't live beyond the callback,
  | so you should make a copy of it with metadata_object_clone()
  | if you will need it elsewhere. Since
  | metadata blocks can potentially be
  | large, by default the decoder only calls
  | the metadata callback for the \c STREAMINFO
  | block; you can instruct the decoder
  | to pass or filter other blocks with stream_decoder_set_metadata_*()
  | calls.
  | 
  | -----------
  | @note
  | 
  | In general, StreamDecoder functions
  | which change the state should not be
  | called on the \a decoder while in the
  | callback.
  | 
  | -----------
  | @param decoder
  | 
  | The decoder instance calling the callback.
  | ----------
  | @param metadata
  | 
  | The decoded metadata block.
  | ----------
  | @param client_data
  | 
  | The callee's client data set through
  | 
  | stream_decoder_init_*().
  |
  */
pub type StreamDecoderMetadataCallback = fn(
        decoder:     *const StreamDecoder,
        metadata:    *const StreamMetadata,
        client_data: *mut c_void
) -> c_void;

/**
  | Signature for the error callback.
  | 
  | A function pointer matching this signature
  | must be passed to one of the stream_decoder_init_*()
  | functions.
  | 
  | The supplied function will be called
  | whenever an error occurs during decoding.
  | 
  | -----------
  | @note
  | 
  | In general, StreamDecoder functions
  | which change the state should not be
  | called on the \a decoder while in the
  | callback.
  | 
  | -----------
  | @param decoder
  | 
  | The decoder instance calling the callback.
  | ----------
  | @param status
  | 
  | The error encountered by the decoder.
  | ----------
  | @param client_data
  | 
  | The callee's client data set through
  | 
  | stream_decoder_init_*().
  |
  */
pub type StreamDecoderErrorCallback = fn(
        decoder:     *const StreamDecoder,
        status:      StreamDecoderErrorStatus,
        client_data: *mut c_void
) -> c_void;

/**
  | \defgroup flac_decoder FLAC/ \*_decoder.h:
  | decoder interfaces \ingroup flac
  | 
  | -----------
  | @brief
  | 
  | This module describes the decoder layers
  | provided by libFLAC.
  | 
  | The stream decoder can be used to decode
  | complete streams either from the client
  | via callbacks, or directly from a file,
  | depending on how it is initialized.
  | When decoding via callbacks, the client
  | provides callbacks for reading FLAC
  | data and writing decoded samples, and
  | handling metadata and errors. If the
  | client also supplies seek-related
  | callback, the decoder function for
  | sample-accurate seeking within the
  | 
  | FLAC input is also available. When decoding
  | from a file, the client needs only supply
  | a filename or open \c FILE* and write/metadata/error
  | callbacks; the rest of the callbacks
  | are supplied internally. For more info
  | see the \link flac_stream_decoder
  | stream decoder \endlink module.
  |
  */

/*
  | \defgroup flac_stream_decoder FLAC/stream_decoder.h:
  | stream decoder interface \ingroup
  | flac_decoder
  | 
  | -----------
  | @brief
  | 
  | This module contains the functions
  | which implement the stream decoder.
  | 
  | The stream decoder can decode native
  | FLAC, and optionally Ogg FLAC (check
  | _SUPPORTS_OGG_FLAC) streams and files.
  | 
  | The basic usage of this decoder is as
  | follows:
  | 
  | - The program creates an instance of
  | a decoder using
  | 
  | stream_decoder_new().
  | 
  | - The program overrides the default
  | settings using
  | 
  | stream_decoder_set_*() functions.
  | 
  | - The program initializes the instance
  | to validate the settings and prepare
  | for decoding using
  | 
  | - stream_decoder_init_stream()
  | or stream_decoder_init_FILE()
  | or stream_decoder_init_file()
  | for native FLAC,
  | 
  | - stream_decoder_init_ogg_stream()
  | or stream_decoder_init_ogg_FILE()
  | or stream_decoder_init_ogg_file()
  | for Ogg FLAC
  | 
  | - The program calls the
  | stream_decoder_process_*() functions to
  | decode data, which subsequently calls the
  | callbacks.
  | 
  | - The program finishes the decoding
  | with stream_decoder_finish(),
  | which flushes the input and output and
  | resets the decoder to the uninitialized
  | state.
  | 
  | - The instance may be used again or deleted
  | with
  | 
  | stream_decoder_delete().
  | 
  | In more detail, the program will create
  | a new instance by calling
  | 
  | stream_decoder_new(), then
  | call stream_decoder_set_*()
  | functions to override the default decoder
  | options, and call one of the stream_decoder_init_*()
  | functions.
  | 
  | There are three initialization functions
  | for native FLAC, one for setting up the
  | decoder to decode FLAC data from the
  | client via callbacks, and two for decoding
  | directly from a FLAC file.
  | 
  | For decoding via callbacks, use
  | stream_decoder_init_stream().
  | 
  | You must also supply several callbacks
  | for handling I/O. Some (like seeking)
  | are optional, depending on the capabilities
  | of the input.
  | 
  | For decoding directly from a file, use
  | stream_decoder_init_FILE()
  | or stream_decoder_init_file().
  | Then you must only supply an open \c FILE*
  | or filename and fewer callbacks; the
  | decoder will handle the other callbacks
  | internally.
  | 
  | There are three similarly-named init
  | functions for decoding from Ogg
  | 
  | FLAC streams. Check \c _SUPPORTS_OGG_FLAC
  | to find out if the library has been built
  | with Ogg support.
  | 
  | Once the decoder is initialized, your
  | program will call one of several functions
  | to start the decoding process:
  | 
  | - stream_decoder_process_single()
  | - Tells the decoder to process at most
  | one metadata block or audio frame and
  | return, calling either the metadata
  | callback or write callback, respectively,
  | once. If the decoder loses sync it will
  | return with only the error callback
  | being called.
  | 
  | - stream_decoder_process_until_end_of_metadata()
  |
  | - Tells the decoder to process the stream
  | from the current location and stop upon
  | reaching the first audio frame. The
  | client will get one metadata, write,
  | or error callback per metadata block,
  | audio frame, or sync error, respectively.
  | 
  | - stream_decoder_process_until_end_of_stream()
  |
  | - Tells the decoder to process the stream from
  | the current location until the read callback
  | returns
  | STREAM_DECODER_READ_STATUS_END_OF_STREAM
  | or
  | 
  | STREAM_DECODER_READ_STATUS_ABORT.
  | The client will get one metadata, write,
  | or error callback per metadata block,
  | audio frame, or sync error, respectively.
  | 
  | When the decoder has finished decoding
  | (normally or through an abort), the instance
  | is finished by calling
  | stream_decoder_finish(), which ensures
  | the decoder is in the correct state and frees
  | memory. Then the instance may be deleted with
  | stream_decoder_delete() or initialized
  | again to decode another stream.
  | 
  | Seeking is exposed through the
  | stream_decoder_seek_absolute() method.
  | 
  | At any point after the stream decoder has been
  | initialized, the client can call this function
  | to seek to an exact sample within the stream.
  | 
  | Subsequently, the first time the write
  | callback is called it will be passed
  | a (possibly partial) block starting at that
  | sample.
  | 
  | If the client cannot seek via the callback
  | interface provided, but still has another way
  | of seeking, it can flush the decoder using
  | 
  | stream_decoder_flush() and start feeding
  | data from the new position through the read
  | callback.
  | 
  | The stream decoder also provides MD5 signature
  | checking. If this is turned on before
  | initialization, stream_decoder_finish()
  | will report when the decoded MD5 signature
  | does not match the one stored in the
  | STREAMINFO block. MD5 checking is
  | automatically turned off (until the next
  | stream_decoder_reset()) if there is
  | no signature in the STREAMINFO
  | block or when a seek is attempted.
  | 
  | The stream_decoder_set_metadata_*()
  | functions deserve special attention.  By
  | default, the decoder only calls the
  | metadata_callback for the STREAMINFO
  | block. These functions allow you to tell the
  | decoder explicitly which blocks to parse and
  | return via the metadata_callback and/or which
  | to skip. Use
  | a stream_decoder_set_metadata_respond_all(),
  | 
  | stream_decoder_set_metadata_ignore()
  | ... or
  | stream_decoder_set_metadata_ignore_all(),
  | 
  | stream_decoder_set_metadata_respond()
  | ... sequence to exactly specify which blocks
  | to return. Remember that metadata blocks can
  | potentially be big (for example, cover art) so
  | filtering out the ones you don't use can
  | reduce the memory requirements of the
  | decoder. Also note the special forms
  | stream_decoder_set_metadata_respond_application(id)
  | and
  | stream_decoder_set_metadata_ignore_application(id)
  | for filtering APPLICATION blocks based on the
  | application ID.
  | 
  | STREAMINFO and SEEKTABLE blocks are always
  | parsed and used internally, but they still can
  | legally be filtered from the
  | metadata_callback.
  | 
  | -----------
  | @note
  | 
  | The "set" functions may only be called when
  | the decoder is in the state
  | STREAM_DECODER_UNINITIALIZED, i.e. after
  | 
  | stream_decoder_new() or stream_decoder_finish(),
  | but before stream_decoder_init_*().
  | If this is the case they will return \c
  | true, otherwise \c false.
  | ----------
  | @note
  | 
  | stream_decoder_finish() resets
  | all settings to the constructor defaults,
  | including the callbacks.
  |
  */

/**
  | Maps a StreamDecoderState to
  | a C string.
  | 
  | Using a StreamDecoderState
  | as the index to this array will give the
  | string equivalent. The contents should
  | not be modified.
  |
  */
lazy_static!{
    /*
    extern  const char * const StreamDecoderStateString[];
    */
}

/**
  | Maps a StreamDecoderInitStatus
  | to a C string.
  | 
  | Using a StreamDecoderInitStatus
  | as the index to this array will give the
  | string equivalent. The contents should
  | not be modified.
  |
  */
lazy_static!{
    /*
    extern  const char * const StreamDecoderInitStatusString[];
    */
}

/**
  | Maps a StreamDecoderReadStatus
  | to a C string.
  | 
  | Using a StreamDecoderReadStatus
  | as the index to this array will give the
  | string equivalent. The contents should
  | not be modified.
  |
  */
lazy_static!{
    /*
    extern  const char * const StreamDecoderReadStatusString[];
    */
}

/**
  | Maps a StreamDecoderSeekStatus
  | to a C string.
  | 
  | Using a StreamDecoderSeekStatus
  | as the index to this array will give the
  | string equivalent. The contents should
  | not be modified.
  |
  */
lazy_static!{
    /*
    extern  const char * const StreamDecoderSeekStatusString[];
    */
}

/**
  | Maps a StreamDecoderTellStatus
  | to a C string.
  | 
  | Using a StreamDecoderTellStatus
  | as the index to this array will give the
  | string equivalent. The contents should
  | not be modified.
  |
  */
lazy_static!{
    /*
    extern  const char * const StreamDecoderTellStatusString[];
    */
}

/**
  | Maps a StreamDecoderLengthStatus
  | to a C string.
  | 
  | Using a StreamDecoderLengthStatus
  | as the index to this array will give the
  | string equivalent. The contents should
  | not be modified.
  |
  */
lazy_static!{
    /*
    extern  const char * const StreamDecoderLengthStatusString[];
    */
}

/**
  | Maps a StreamDecoderWriteStatus
  | to a C string.
  | 
  | Using a StreamDecoderWriteStatus
  | as the index to this array will give the
  | string equivalent. The contents should
  | not be modified.
  |
  */
lazy_static!{
    /*
    extern  const char * const StreamDecoderWriteStatusString[];
    */
}

/**
  | Maps a StreamDecoderErrorStatus
  | to a C string.
  | 
  | Using a StreamDecoderErrorStatus
  | as the index to this array will give the
  | string equivalent. The contents should
  | not be modified.
  |
  */
lazy_static!{
    /*
    extern  const char * const StreamDecoderErrorStatusString[];
    */
}

/**
  | Create a new stream decoder instance.
  | The instance is created with default
  | settings; see the individual stream_decoder_set_*()
  | functions for each setting's default.
  | 
  | -----------
  | @return
  | 
  | StreamDecoder* \c NULL if there
  | was an error allocating memory, else
  | the new instance.
  |
  */
pub fn flac_stream_decoder_new() -> *mut StreamDecoder {
    
    todo!();
        /*
        
        */
}

/**
  | Free a decoder instance. Deletes the
  | object pointed to by \a decoder.
  | 
  | -----------
  | @param decoder
  | 
  | A pointer to an existing decoder. \assert
  | 
  | -----------
  | @code
  | 
  | decoder != NULL
  |
  */
pub fn flac_stream_decoder_delete(decoder: *mut StreamDecoder)  {
    
    todo!();
        /*
        
        */
}

/**
  | Set the serial number for the FLAC stream
  | within the Ogg container.
  | 
  | The default behavior is to use the serial
  | number of the first Ogg page. Setting
  | a serial number here will explicitly
  | specify which stream is to be decoded.
  | 
  | -----------
  | @note
  | 
  | This does not need to be set for native
  | FLAC decoding. \default \c use serial
  | number of first page
  | 
  | -----------
  | @param decoder
  | 
  | A decoder instance to set.
  | ----------
  | @param serial_number
  | 
  | See above. \assert
  | 
  | -----------
  | @code
  | 
  | decoder != NULL
  | 
  | -----------
  | @return
  | 
  | bool \c false if the decoder is
  | already initialized, else \c true.
  |
  */
pub fn flac_stream_decoder_set_ogg_serial_number(
        decoder:       *mut StreamDecoder,
        serial_number: i64) -> bool {
    
    todo!();
        /*
        
        */
}

/**
  | Set the "MD5 signature checking" flag.
  | If \c true, the decoder will compute
  | the MD5 signature of the unencoded audio
  | data while decoding and compare it to
  | the signature from the STREAMINFO block,
  | if it exists, during stream_decoder_finish().
  | 
  | MD5 signature checking will be turned
  | off (until the next
  | 
  | stream_decoder_reset()) if
  | there is no signature in the
  | 
  | STREAMINFO block or when a seek is attempted.
  | 
  | Clients that do not use the MD5 check
  | should leave this off to speed up decoding.
  | \default \c false
  | 
  | -----------
  | @param decoder
  | 
  | A decoder instance to set.
  | ----------
  | @param value
  | 
  | Flag value (see above). \assert
  | 
  | -----------
  | @code
  | 
  | decoder != NULL
  | 
  | -----------
  | @return
  | 
  | bool \c false if the decoder is
  | already initialized, else \c true.
  |
  */
pub fn flac_stream_decoder_set_md5_checking(
        decoder: *mut StreamDecoder,
        value:   bool) -> bool {
    
    todo!();
        /*
        
        */
}

/**
  | Direct the decoder to pass on all metadata
  | blocks of type \a type. \default By default,
  | only the \c STREAMINFO block is returned
  | via the metadata callback.
  | 
  | -----------
  | @param decoder
  | 
  | A decoder instance to set.
  | ----------
  | @param type
  | 
  | See above. \assert
  | 
  | -----------
  | @code
  | 
  | decoder != NULL
  | \a type is valid
  | 
  | -----------
  | @return
  | 
  | bool \c false if the decoder is
  | already initialized, else \c true.
  |
  */
pub fn flac_stream_decoder_set_metadata_respond(
        decoder: *mut StreamDecoder,
        ty:      MetadataType) -> bool {
    
    todo!();
        /*
        
        */
}

/**
  | Direct the decoder to pass on all APPLICATION
  | metadata blocks of the given \a id. \default
  | By default, only the \c STREAMINFO block
  | is returned via the metadata callback.
  | 
  | -----------
  | @param decoder
  | 
  | A decoder instance to set.
  | ----------
  | @param id
  | 
  | See above. \assert
  | 
  | -----------
  | @code
  | 
  | decoder != NULL
  | ----------
  | @code
  | 
  | id != NULL
  | 
  | -----------
  | @return
  | 
  | bool \c false if the decoder is
  | already initialized, else \c true.
  |
  */
pub fn flac_stream_decoder_set_metadata_respond_application(
        decoder: *mut StreamDecoder,
        id:      [u8; 4]) -> bool {
    
    todo!();
        /*
        
        */
}

/**
  | Direct the decoder to pass on all metadata
  | blocks of any type. \default By default,
  | only the \c STREAMINFO block is returned
  | via the metadata callback.
  | 
  | -----------
  | @param decoder
  | 
  | A decoder instance to set. \assert
  | 
  | -----------
  | @code
  | 
  | decoder != NULL
  | 
  | -----------
  | @return
  | 
  | bool \c false if the decoder is
  | already initialized, else \c true.
  |
  */
pub fn flac_stream_decoder_set_metadata_respond_all(decoder: *mut StreamDecoder) -> bool {
    
    todo!();
        /*
        
        */
}

/**
  | Direct the decoder to filter out all
  | metadata blocks of type \a type. \default
  | By default, only the \c STREAMINFO block
  | is returned via the metadata callback.
  | 
  | -----------
  | @param decoder
  | 
  | A decoder instance to set.
  | ----------
  | @param type
  | 
  | See above. \assert
  | 
  | -----------
  | @code
  | 
  | decoder != NULL
  | \a type is valid
  | 
  | -----------
  | @return
  | 
  | bool \c false if the decoder is
  | already initialized, else \c true.
  |
  */
pub fn flac_stream_decoder_set_metadata_ignore(
        decoder: *mut StreamDecoder,
        ty:      MetadataType) -> bool {
    
    todo!();
        /*
        
        */
}

/**
  | Direct the decoder to filter out all
  | APPLICATION metadata blocks of the
  | given \a id. \default By default, only
  | the \c STREAMINFO block is returned
  | via the metadata callback.
  | 
  | -----------
  | @param decoder
  | 
  | A decoder instance to set.
  | ----------
  | @param id
  | 
  | See above. \assert
  | 
  | -----------
  | @code
  | 
  | decoder != NULL
  | ----------
  | @code
  | 
  | id != NULL
  | 
  | -----------
  | @return
  | 
  | bool \c false if the decoder is
  | already initialized, else \c true.
  |
  */
pub fn flac_stream_decoder_set_metadata_ignore_application(
        decoder: *mut StreamDecoder,
        id:      [u8; 4]) -> bool {
    
    todo!();
        /*
        
        */
}

/**
  | Direct the decoder to filter out all
  | metadata blocks of any type. \default
  | By default, only the \c STREAMINFO block
  | is returned via the metadata callback.
  | 
  | -----------
  | @param decoder
  | 
  | A decoder instance to set. \assert
  | 
  | -----------
  | @code
  | 
  | decoder != NULL
  | 
  | -----------
  | @return
  | 
  | bool \c false if the decoder is
  | already initialized, else \c true.
  |
  */
pub fn flac_stream_decoder_set_metadata_ignore_all(decoder: *mut StreamDecoder) -> bool {
    
    todo!();
        /*
        
        */
}

/**
  | Get the current decoder state.
  | 
  | -----------
  | @param decoder
  | 
  | A decoder instance to query. \assert
  | 
  | -----------
  | @code
  | 
  | decoder != NULL
  | 
  | -----------
  | @return
  | 
  | StreamDecoderState
  | 
  | The current decoder state.
  |
  */
pub fn flac_stream_decoder_get_state(decoder: *const StreamDecoder) -> StreamDecoderState {
    
    todo!();
        /*
        
        */
}

/**
  | Get the current decoder state as a C string.
  | 
  | -----------
  | @param decoder
  | 
  | A decoder instance to query. \assert
  | 
  | -----------
  | @code
  | 
  | decoder != NULL
  | 
  | -----------
  | @return
  | 
  | const char *
  | 
  | The decoder state as a C string. Do not
  | modify the contents.
  |
  */
pub fn flac_stream_decoder_get_resolved_state_string(decoder: *const StreamDecoder) -> *const u8 {
    
    todo!();
        /*
        
        */
}

/**
  | Get the "MD5 signature checking" flag.
  | 
  | This is the value of the setting, not
  | whether or not the decoder is currently
  | checking the MD5 (remember, it can be
  | turned off automatically by a seek).
  | When the decoder is reset the flag will
  | be restored to the value returned by
  | this function.
  | 
  | -----------
  | @param decoder
  | 
  | A decoder instance to query. \assert
  | 
  | -----------
  | @code
  | 
  | decoder != NULL
  | 
  | -----------
  | @return
  | 
  | bool
  | 
  | See above.
  |
  */
pub fn flac_stream_decoder_get_md5_checking(decoder: *const StreamDecoder) -> bool {
    
    todo!();
        /*
        
        */
}

/**
  | Get the total number of samples in the
  | stream being decoded.
  | 
  | Will only be valid after decoding has
  | started and will contain the value from
  | the \c STREAMINFO block. A value of \c
  | 0 means "unknown".
  | 
  | -----------
  | @param decoder
  | 
  | A decoder instance to query. \assert
  | 
  | -----------
  | @code
  | 
  | decoder != NULL
  | 
  | -----------
  | @return
  | 
  | unsigned
  | 
  | See above.
  |
  */
pub fn flac_stream_decoder_get_total_samples(decoder: *const StreamDecoder) -> u64 {
    
    todo!();
        /*
        
        */
}

/**
  | Get the current number of channels in
  | the stream being decoded.
  | 
  | Will only be valid after decoding has
  | started and will contain the value from
  | the most recently decoded frame header.
  | 
  | -----------
  | @param decoder
  | 
  | A decoder instance to query. \assert
  | 
  | -----------
  | @code
  | 
  | decoder != NULL
  | 
  | -----------
  | @return
  | 
  | unsigned
  | 
  | See above.
  |
  */
pub fn flac_stream_decoder_get_channels(decoder: *const StreamDecoder) -> u32 {
    
    todo!();
        /*
        
        */
}

/**
  | Get the current channel assignment
  | in the stream being decoded.
  | 
  | Will only be valid after decoding has
  | started and will contain the value from
  | the most recently decoded frame header.
  | 
  | -----------
  | @param decoder
  | 
  | A decoder instance to query. \assert
  | 
  | -----------
  | @code
  | 
  | decoder != NULL
  | 
  | -----------
  | @return
  | 
  | ChannelAssignment
  | 
  | See above.
  |
  */
pub fn flac_stream_decoder_get_channel_assignment(decoder: *const StreamDecoder) -> ChannelAssignment {
    
    todo!();
        /*
        
        */
}

/**
  | Get the current sample resolution in
  | the stream being decoded.
  | 
  | Will only be valid after decoding has
  | started and will contain the value from
  | the most recently decoded frame header.
  | 
  | -----------
  | @param decoder
  | 
  | A decoder instance to query. \assert
  | 
  | -----------
  | @code
  | 
  | decoder != NULL
  | 
  | -----------
  | @return
  | 
  | unsigned
  | 
  | See above.
  |
  */
pub fn flac_stream_decoder_get_bits_per_sample(decoder: *const StreamDecoder) -> u32 {
    
    todo!();
        /*
        
        */
}

/**
  | Get the current sample rate in Hz of the
  | stream being decoded.
  | 
  | Will only be valid after decoding has
  | started and will contain the value from
  | the most recently decoded frame header.
  | 
  | -----------
  | @param decoder
  | 
  | A decoder instance to query. \assert
  | 
  | -----------
  | @code
  | 
  | decoder != NULL
  | 
  | -----------
  | @return
  | 
  | unsigned
  | 
  | See above.
  |
  */
pub fn flac_stream_decoder_get_sample_rate(decoder: *const StreamDecoder) -> u32 {
    
    todo!();
        /*
        
        */
}

/**
  | Get the current blocksize of the stream
  | being decoded.
  | 
  | Will only be valid after decoding has
  | started and will contain the value from
  | the most recently decoded frame header.
  | 
  | -----------
  | @param decoder
  | 
  | A decoder instance to query. \assert
  | 
  | -----------
  | @code
  | 
  | decoder != NULL
  | 
  | -----------
  | @return
  | 
  | unsigned
  | 
  | See above.
  |
  */
pub fn flac_stream_decoder_get_blocksize(decoder: *const StreamDecoder) -> u32 {
    
    todo!();
        /*
        
        */
}

/**
  | Returns the decoder's current read
  | position within the stream.
  | 
  | The position is the byte offset from
  | the start of the stream.
  | 
  | Bytes before this position have been
  | fully decoded. Note that there may still
  | be undecoded bytes in the decoder's
  | read FIFO.
  | 
  | The returned position is correct even
  | after a seek.
  | 
  | -----------
  | @param decoder
  | 
  | A decoder instance to query.
  | ----------
  | @param position
  | 
  | Address at which to return the desired
  | position. \assert
  | 
  | -----------
  | @warning
  | 
  | This function currently only works
  | for native FLAC, not Ogg FLAC streams.
  | 
  | -----------
  | @code
  | 
  | decoder != NULL
  | ----------
  | @code
  | 
  | position != NULL
  | 
  | -----------
  | @return
  | 
  | bool \c true if successful, \c
  | false if the stream is not native FLAC,
  | or there was an error from the 'tell'
  | callback or it returned \c STREAM_DECODER_TELL_STATUS_UNSUPPORTED.
  |
  */
pub fn flac_stream_decoder_get_decode_position(
        decoder:  *const StreamDecoder,
        position: *mut u64) -> bool {
    
    todo!();
        /*
        
        */
}

/**
  | Initialize the decoder instance to
  | decode native FLAC streams.
  | 
  | This flavor of initialization sets
  | up the decoder to decode from a native
  | FLAC stream. I/O is performed via callbacks
  | to the client.
  | 
  | For decoding from a plain file via filename
  | or open FILE*,
  | 
  | stream_decoder_init_file()
  | and stream_decoder_init_FILE()
  | provide a simpler interface.
  | 
  | This function should be called after
  | stream_decoder_new() and
  | 
  | stream_decoder_set_*() but
  | before any of the
  | 
  | stream_decoder_process_*()
  | functions. Will set and return the decoder
  | state, which will be STREAM_DECODER_SEARCH_FOR_METADATA
  | if initialization succeeded.
  | 
  | -----------
  | @param decoder
  | 
  | An uninitialized decoder instance.
  | ----------
  | @param read_callback
  | 
  | See StreamDecoderReadCallback.
  | This pointer must not be \c NULL.
  | ----------
  | @param seek_callback
  | 
  | See StreamDecoderSeekCallback.
  | This pointer may be \c NULL if seeking
  | is not supported. If \a seek_callback
  | is not \c NULL then a \a tell_callback,
  | \a length_callback, and \a eof_callback
  | must also be supplied.
  | 
  | Alternatively, a dummy seek callback
  | that just returns \c STREAM_DECODER_SEEK_STATUS_UNSUPPORTED
  | may also be supplied, all though this
  | is slightly less efficient for the decoder.
  | ----------
  | @param tell_callback
  | 
  | See StreamDecoderTellCallback.
  | This pointer may be \c NULL if not supported
  | by the client. If \a seek_callback is
  | not \c NULL then a \a tell_callback must
  | also be supplied.
  | 
  | Alternatively, a dummy tell callback
  | that just returns \c STREAM_DECODER_TELL_STATUS_UNSUPPORTED
  | may also be supplied, all though this
  | is slightly less efficient for the decoder.
  | ----------
  | @param length_callback
  | 
  | See StreamDecoderLengthCallback.
  | This pointer may be \c NULL if not supported
  | by the client. If \a seek_callback is
  | not \c NULL then a \a length_callback
  | must also be supplied.
  | 
  | Alternatively, a dummy length callback
  | that just returns \c STREAM_DECODER_LENGTH_STATUS_UNSUPPORTED
  | may also be supplied, all though this
  | is slightly less efficient for the decoder.
  | ----------
  | @param eof_callback
  | 
  | See StreamDecoderEofCallback.
  | This pointer may be \c NULL if not supported
  | by the client. If \a seek_callback is
  | not \c NULL then a \a eof_callback must
  | also be supplied.
  | 
  | Alternatively, a dummy length callback
  | that just returns \c false may also be
  | supplied, all though this is slightly
  | less efficient for the decoder.
  | ----------
  | @param write_callback
  | 
  | See StreamDecoderWriteCallback.
  | This pointer must not be \c NULL.
  | ----------
  | @param metadata_callback
  | 
  | See StreamDecoderMetadataCallback.
  | This pointer may be \c NULL if the callback
  | is not desired.
  | ----------
  | @param error_callback
  | 
  | See StreamDecoderErrorCallback.
  | This pointer must not be \c NULL.
  | ----------
  | @param client_data
  | 
  | This value will be supplied to callbacks
  | in their \a client_data argument. \assert
  | 
  | -----------
  | @code
  | 
  | decoder != NULL
  | 
  | -----------
  | @return
  | 
  | StreamDecoderInitStatus \c
  | STREAM_DECODER_INIT_STATUS_OK
  | if initialization was successful;
  | see StreamDecoderInitStatus
  | for the meanings of other return values.
  |
  */
pub fn flac_stream_decoder_init_stream(
        decoder:           *mut StreamDecoder,
        read_callback:     StreamDecoderReadCallback,
        seek_callback:     StreamDecoderSeekCallback,
        tell_callback:     StreamDecoderTellCallback,
        length_callback:   StreamDecoderLengthCallback,
        eof_callback:      StreamDecoderEofCallback,
        write_callback:    StreamDecoderWriteCallback,
        metadata_callback: StreamDecoderMetadataCallback,
        error_callback:    StreamDecoderErrorCallback,
        client_data:       *mut c_void) -> StreamDecoderInitStatus {
    
    todo!();
        /*
        
        */
}

/**
  | Initialize the decoder instance to
  | decode Ogg FLAC streams.
  | 
  | This flavor of initialization sets
  | up the decoder to decode from a
  | 
  | FLAC stream in an Ogg container. I/O
  | is performed via callbacks to the client.
  | For decoding from a plain file via filename
  | or open FILE*,
  | 
  | stream_decoder_init_ogg_file()
  | and stream_decoder_init_ogg_FILE()
  | provide a simpler interface.
  | 
  | This function should be called after
  | stream_decoder_new() and
  | 
  | stream_decoder_set_*() but
  | before any of the
  | 
  | stream_decoder_process_*()
  | functions. Will set and return the decoder
  | state, which will be STREAM_DECODER_SEARCH_FOR_METADATA
  | if initialization succeeded.
  | 
  | -----------
  | @note
  | 
  | Support for Ogg FLAC in the library is
  | optional. If this library has been built
  | without support for Ogg FLAC, this function
  | will return \c STREAM_DECODER_INIT_STATUS_UNSUPPORTED_CONTAINER.
  | 
  | -----------
  | @param decoder
  | 
  | An uninitialized decoder instance.
  | ----------
  | @param read_callback
  | 
  | See StreamDecoderReadCallback.
  | This pointer must not be \c NULL.
  | ----------
  | @param seek_callback
  | 
  | See StreamDecoderSeekCallback.
  | This pointer may be \c NULL if seeking
  | is not supported. If \a seek_callback
  | is not \c NULL then a \a tell_callback,
  | \a length_callback, and \a eof_callback
  | must also be supplied.
  | 
  | Alternatively, a dummy seek callback
  | that just returns \c STREAM_DECODER_SEEK_STATUS_UNSUPPORTED
  | may also be supplied, all though this
  | is slightly less efficient for the decoder.
  | ----------
  | @param tell_callback
  | 
  | See StreamDecoderTellCallback.
  | This pointer may be \c NULL if not supported
  | by the client. If \a seek_callback is
  | not \c NULL then a \a tell_callback must
  | also be supplied.
  | 
  | Alternatively, a dummy tell callback
  | that just returns \c STREAM_DECODER_TELL_STATUS_UNSUPPORTED
  | may also be supplied, all though this
  | is slightly less efficient for the decoder.
  | ----------
  | @param length_callback
  | 
  | See StreamDecoderLengthCallback.
  | This pointer may be \c NULL if not supported
  | by the client. If \a seek_callback is
  | not \c NULL then a \a length_callback
  | must also be supplied.
  | 
  | Alternatively, a dummy length callback
  | that just returns \c STREAM_DECODER_LENGTH_STATUS_UNSUPPORTED
  | may also be supplied, all though this
  | is slightly less efficient for the decoder.
  | ----------
  | @param eof_callback
  | 
  | See StreamDecoderEofCallback.
  | This pointer may be \c NULL if not supported
  | by the client. If \a seek_callback is
  | not \c NULL then a \a eof_callback must
  | also be supplied.
  | 
  | Alternatively, a dummy length callback
  | that just returns \c false may also be
  | supplied, all though this is slightly
  | less efficient for the decoder.
  | ----------
  | @param write_callback
  | 
  | See StreamDecoderWriteCallback.
  | This pointer must not be \c NULL.
  | ----------
  | @param metadata_callback
  | 
  | See StreamDecoderMetadataCallback.
  | This pointer may be \c NULL if the callback
  | is not desired.
  | ----------
  | @param error_callback
  | 
  | See StreamDecoderErrorCallback.
  | This pointer must not be \c NULL.
  | ----------
  | @param client_data
  | 
  | This value will be supplied to callbacks
  | in their \a client_data argument. \assert
  | 
  | -----------
  | @code
  | 
  | decoder != NULL
  | 
  | -----------
  | @return
  | 
  | StreamDecoderInitStatus \c
  | STREAM_DECODER_INIT_STATUS_OK
  | if initialization was successful;
  | see StreamDecoderInitStatus
  | for the meanings of other return values.
  |
  */
pub fn flac_stream_decoder_init_ogg_stream(
        decoder:           *mut StreamDecoder,
        read_callback:     StreamDecoderReadCallback,
        seek_callback:     StreamDecoderSeekCallback,
        tell_callback:     StreamDecoderTellCallback,
        length_callback:   StreamDecoderLengthCallback,
        eof_callback:      StreamDecoderEofCallback,
        write_callback:    StreamDecoderWriteCallback,
        metadata_callback: StreamDecoderMetadataCallback,
        error_callback:    StreamDecoderErrorCallback,
        client_data:       *mut c_void) -> StreamDecoderInitStatus {
    
    todo!();
        /*
        
        */
}

/**
  | Initialize the decoder instance to
  | decode native FLAC files.
  | 
  | This flavor of initialization sets
  | up the decoder to decode from a plain
  | native FLAC file. For non-stdio streams,
  | you must use
  | 
  | stream_decoder_init_stream()
  | and provide callbacks for the I/O.
  | 
  | This function should be called after
  | stream_decoder_new() and
  | 
  | stream_decoder_set_*() but
  | before any of the
  | 
  | stream_decoder_process_*()
  | functions. Will set and return the decoder
  | state, which will be STREAM_DECODER_SEARCH_FOR_METADATA
  | if initialization succeeded.
  | 
  | -----------
  | @param decoder
  | 
  | An uninitialized decoder instance.
  | ----------
  | @param file
  | 
  | An open FLAC file. The file should have
  | been opened with mode \c "rb" and rewound.
  | The file becomes owned by the decoder
  | and should not be manipulated by the
  | client while decoding.
  | 
  | Unless \a file is \c stdin, it will be
  | closed when stream_decoder_finish()
  | is called.
  | 
  | Note however that seeking will not work
  | when decoding from \c stdout since it
  | is not seekable.
  | ----------
  | @param write_callback
  | 
  | See StreamDecoderWriteCallback.
  | This pointer must not be \c NULL.
  | ----------
  | @param metadata_callback
  | 
  | See StreamDecoderMetadataCallback.
  | This pointer may be \c NULL if the callback
  | is not desired.
  | ----------
  | @param error_callback
  | 
  | See StreamDecoderErrorCallback.
  | This pointer must not be \c NULL.
  | ----------
  | @param client_data
  | 
  | This value will be supplied to callbacks
  | in their \a client_data argument. \assert
  | 
  | -----------
  | @code
  | 
  | decoder != NULL
  | ----------
  | @code
  | 
  | file != NULL
  | 
  | -----------
  | @return
  | 
  | StreamDecoderInitStatus \c
  | STREAM_DECODER_INIT_STATUS_OK
  | if initialization was successful;
  | see StreamDecoderInitStatus
  | for the meanings of other return values.
  |
  */
pub fn flac_stream_decoder_init_file(
        decoder:           *mut StreamDecoder,
        file:              *mut libc::FILE,
        write_callback:    StreamDecoderWriteCallback,
        metadata_callback: StreamDecoderMetadataCallback,
        error_callback:    StreamDecoderErrorCallback,
        client_data:       *mut c_void) -> StreamDecoderInitStatus {
    
    todo!();
        /*
        
        */
}

/**
  | Initialize the decoder instance to
  | decode Ogg FLAC files.
  | 
  | This flavor of initialization sets
  | up the decoder to decode from a plain
  | Ogg FLAC file. For non-stdio streams,
  | you must use
  | 
  | stream_decoder_init_ogg_stream()
  | and provide callbacks for the I/O.
  | 
  | This function should be called after
  | stream_decoder_new() and
  | 
  | stream_decoder_set_*() but
  | before any of the
  | 
  | stream_decoder_process_*()
  | functions. Will set and return the decoder
  | state, which will be STREAM_DECODER_SEARCH_FOR_METADATA
  | if initialization succeeded.
  | 
  | -----------
  | @note
  | 
  | Support for Ogg FLAC in the library is
  | optional. If this library has been built
  | without support for Ogg FLAC, this function
  | will return \c STREAM_DECODER_INIT_STATUS_UNSUPPORTED_CONTAINER.
  | 
  | -----------
  | @param decoder
  | 
  | An uninitialized decoder instance.
  | ----------
  | @param file
  | 
  | An open FLAC file. The file should have
  | been opened with mode \c "rb" and rewound.
  | The file becomes owned by the decoder
  | and should not be manipulated by the
  | client while decoding.
  | 
  | Unless \a file is \c stdin, it will be
  | closed when stream_decoder_finish()
  | is called.
  | 
  | Note however that seeking will not work
  | when decoding from \c stdout since it
  | is not seekable.
  | ----------
  | @param write_callback
  | 
  | See StreamDecoderWriteCallback.
  | This pointer must not be \c NULL.
  | ----------
  | @param metadata_callback
  | 
  | See StreamDecoderMetadataCallback.
  | This pointer may be \c NULL if the callback
  | is not desired.
  | ----------
  | @param error_callback
  | 
  | See StreamDecoderErrorCallback.
  | This pointer must not be \c NULL.
  | ----------
  | @param client_data
  | 
  | This value will be supplied to callbacks
  | in their \a client_data argument. \assert
  | 
  | -----------
  | @code
  | 
  | decoder != NULL
  | ----------
  | @code
  | 
  | file != NULL
  | 
  | -----------
  | @return
  | 
  | StreamDecoderInitStatus \c
  | STREAM_DECODER_INIT_STATUS_OK
  | if initialization was successful;
  | see StreamDecoderInitStatus
  | for the meanings of other return values.
  |
  */
pub fn flac_stream_decoder_init_ogg_file(
        decoder:           *mut StreamDecoder,
        file:              *mut libc::FILE,
        write_callback:    StreamDecoderWriteCallback,
        metadata_callback: StreamDecoderMetadataCallback,
        error_callback:    StreamDecoderErrorCallback,
        client_data:       *mut c_void) -> StreamDecoderInitStatus {
    
    todo!();
        /*
        
        */
}

/**
  | Initialize the decoder instance to
  | decode native FLAC files.
  | 
  | This flavor of initialization sets
  | up the decoder to decode from a plain
  | native FLAC file. If POSIX fopen() semantics
  | are not sufficient, (for example, with
  | Unicode filenames on Windows), you
  | must use
  | 
  | stream_decoder_init_FILE(),
  | or stream_decoder_init_stream()
  | and provide callbacks for the I/O.
  | 
  | This function should be called after
  | stream_decoder_new() and
  | 
  | stream_decoder_set_*() but
  | before any of the
  | 
  | stream_decoder_process_*()
  | functions. Will set and return the decoder
  | state, which will be STREAM_DECODER_SEARCH_FOR_METADATA
  | if initialization succeeded.
  | 
  | -----------
  | @param decoder
  | 
  | An uninitialized decoder instance.
  | ----------
  | @param filename
  | 
  | The name of the file to decode from. The
  | file will be opened with fopen(). Use
  | \c NULL to decode from \c stdin. Note
  | that \c stdin is not seekable.
  | ----------
  | @param write_callback
  | 
  | See StreamDecoderWriteCallback.
  | This pointer must not be \c NULL.
  | ----------
  | @param metadata_callback
  | 
  | See StreamDecoderMetadataCallback.
  | This pointer may be \c NULL if the callback
  | is not desired.
  | ----------
  | @param error_callback
  | 
  | See StreamDecoderErrorCallback.
  | This pointer must not be \c NULL.
  | ----------
  | @param client_data
  | 
  | This value will be supplied to callbacks
  | in their \a client_data argument. \assert
  | 
  | -----------
  | @code
  | 
  | decoder != NULL
  | 
  | -----------
  | @return
  | 
  | StreamDecoderInitStatus \c
  | STREAM_DECODER_INIT_STATUS_OK
  | if initialization was successful;
  | see StreamDecoderInitStatus
  | for the meanings of other return values.
  |
  */
pub fn flac_stream_decoder_init_file_with_filename(
        decoder:           *mut StreamDecoder,
        filename:          *const u8,
        write_callback:    StreamDecoderWriteCallback,
        metadata_callback: StreamDecoderMetadataCallback,
        error_callback:    StreamDecoderErrorCallback,
        client_data:       *mut c_void) -> StreamDecoderInitStatus {
    
    todo!();
        /*
        
        */
}

/**
  | Initialize the decoder instance to
  | decode Ogg FLAC files.
  | 
  | This flavor of initialization sets
  | up the decoder to decode from a plain
  | 
  | Ogg FLAC file. If POSIX fopen() semantics
  | are not sufficient, (for example, with
  | Unicode filenames on Windows), you
  | must use
  | 
  | stream_decoder_init_ogg_FILE(),
  | or stream_decoder_init_ogg_stream()
  | and provide callbacks for the I/O.
  | 
  | This function should be called after
  | stream_decoder_new() and
  | 
  | stream_decoder_set_*() but
  | before any of the
  | 
  | stream_decoder_process_*()
  | functions. Will set and return the decoder
  | state, which will be STREAM_DECODER_SEARCH_FOR_METADATA
  | if initialization succeeded.
  | 
  | -----------
  | @note
  | 
  | Support for Ogg FLAC in the library is
  | optional. If this library has been built
  | without support for Ogg FLAC, this function
  | will return \c STREAM_DECODER_INIT_STATUS_UNSUPPORTED_CONTAINER.
  | 
  | -----------
  | @param decoder
  | 
  | An uninitialized decoder instance.
  | ----------
  | @param filename
  | 
  | The name of the file to decode from. The
  | file will be opened with fopen(). Use
  | \c NULL to decode from \c stdin. Note
  | that \c stdin is not seekable.
  | ----------
  | @param write_callback
  | 
  | See StreamDecoderWriteCallback.
  | This pointer must not be \c NULL.
  | ----------
  | @param metadata_callback
  | 
  | See StreamDecoderMetadataCallback.
  | This pointer may be \c NULL if the callback
  | is not desired.
  | ----------
  | @param error_callback
  | 
  | See StreamDecoderErrorCallback.
  | This pointer must not be \c NULL.
  | ----------
  | @param client_data
  | 
  | This value will be supplied to callbacks
  | in their \a client_data argument. \assert
  | 
  | -----------
  | @code
  | 
  | decoder != NULL
  | 
  | -----------
  | @return
  | 
  | StreamDecoderInitStatus \c
  | STREAM_DECODER_INIT_STATUS_OK
  | if initialization was successful;
  | see StreamDecoderInitStatus
  | for the meanings of other return values.
  |
  */
pub fn flac_stream_decoder_init_ogg_file_with_filename(
        decoder:           *mut StreamDecoder,
        filename:          *const u8,
        write_callback:    StreamDecoderWriteCallback,
        metadata_callback: StreamDecoderMetadataCallback,
        error_callback:    StreamDecoderErrorCallback,
        client_data:       *mut c_void) -> StreamDecoderInitStatus {
    
    todo!();
        /*
        
        */
}

/**
  | Finish the decoding process.
  | 
  | Flushes the decoding buffer, releases
  | resources, resets the decoder settings
  | to their defaults, and returns the decoder
  | state to
  | 
  | STREAM_DECODER_UNINITIALIZED.
  | 
  | In the event of a prematurely-terminated
  | decode, it is not strictly necessary
  | to call this immediately before stream_decoder_delete()
  | but it is good practice to match every
  | stream_decoder_init_*() with
  | a stream_decoder_finish().
  | 
  | -----------
  | @param decoder
  | 
  | An uninitialized decoder instance.
  | \assert
  | 
  | -----------
  | @code
  | 
  | decoder != NULL
  | 
  | -----------
  | @return
  | 
  | bool \c false if MD5 checking
  | is on AND a STREAMINFO block was available
  | 
  | AND the MD5 signature in the STREAMINFO
  | block was non-zero AND the signature
  | does not match the one computed by the
  | decoder; else \c true.
  |
  */
pub fn flac_stream_decoder_finish(decoder: *mut StreamDecoder) -> bool {
    
    todo!();
        /*
        
        */
}

/**
  | Flush the stream input.
  | 
  | The decoder's input buffer will be cleared
  | and the state set to \c STREAM_DECODER_SEARCH_FOR_FRAME_SYNC.
  | This will also turn off MD5 checking.
  | 
  | -----------
  | @param decoder
  | 
  | A decoder instance. \assert
  | 
  | -----------
  | @code
  | 
  | decoder != NULL
  | 
  | -----------
  | @return
  | 
  | bool \c true if successful, else
  | \c false if a memory allocation error
  | occurs (in which case the state will
  | be set to \c STREAM_DECODER_MEMORY_ALLOCATION_ERROR).
  |
  */
pub fn flac_stream_decoder_flush(decoder: *mut StreamDecoder) -> bool {
    
    todo!();
        /*
        
        */
}

/**
  | Reset the decoding process.
  | 
  | The decoder's input buffer will be cleared
  | and the state set to \c STREAM_DECODER_SEARCH_FOR_METADATA.
  | This is similar to
  | 
  | stream_decoder_finish() except
  | that the settings are preserved; there
  | is no need to call stream_decoder_init_*()
  | before decoding again. MD5 checking
  | will be restored to its original setting.
  | 
  | If the decoder is seekable, or was initialized
  | with
  | 
  | stream_decoder_init*_FILE()
  | or stream_decoder_init*_file(),
  | the decoder will also attempt to seek
  | to the beginning of the file.
  | 
  | If this rewind fails, this function
  | will return \c false. It follows that
  | stream_decoder_reset() cannot
  | be used when decoding from \c stdin.
  | 
  | If the decoder was initialized with
  | stream_encoder_init*_stream()
  | and is not seekable (i.e. no seek callback
  | was provided or the seek callback returns
  | \c STREAM_DECODER_SEEK_STATUS_UNSUPPORTED),
  | it is the duty of the client to start feeding
  | data from the beginning of the stream
  | on the next stream_decoder_process()
  | or
  | 
  | stream_decoder_process_interleaved()
  | call.
  | 
  | -----------
  | @param decoder
  | 
  | A decoder instance. \assert
  | 
  | -----------
  | @code
  | 
  | decoder != NULL
  | 
  | -----------
  | @return
  | 
  | bool \c true if successful, else
  | \c false if a memory allocation occurs
  | (in which case the state will be set to
  | \c STREAM_DECODER_MEMORY_ALLOCATION_ERROR)
  | or a seek error occurs (the state will
  | be unchanged).
  |
  */
pub fn flac_stream_decoder_reset(decoder: *mut StreamDecoder) -> bool {
    
    todo!();
        /*
        
        */
}

/**
  | Decode one metadata block or audio frame.
  | 
  | This version instructs the decoder
  | to decode a either a single metadata
  | block or a single frame and stop, unless
  | the callbacks return a fatal error or
  | the read callback returns \c STREAM_DECODER_READ_STATUS_END_OF_STREAM.
  | 
  | As the decoder needs more input it will
  | call the read callback.
  | 
  | Depending on what was decoded, the metadata
  | or write callback will be called with
  | the decoded metadata block or audio
  | frame.
  | 
  | Unless there is a fatal read error or
  | end of stream, this function will return
  | once one whole frame is decoded. In other
  | words, if the stream is not synchronized
  | or points to a corrupt frame header,
  | the decoder will continue to try and
  | resync until it gets to a valid frame,
  | then decode one frame, then return.
  | If the decoder points to a frame whose
  | frame CRC in the frame footer does not
  | match the computed frame CRC, this function
  | will issue a
  | 
  | STREAM_DECODER_ERROR_STATUS_FRAME_CRC_MISMATCH
  | error to the error callback, and return,
  | having decoded one complete, although
  | corrupt, frame. (Such corrupted frames
  | are sent as silence of the correct length
  | to the write callback.)
  | 
  | -----------
  | @param decoder
  | 
  | An initialized decoder instance. \assert
  | 
  | -----------
  | @code
  | 
  | decoder != NULL
  | 
  | -----------
  | @return
  | 
  | bool \c false if any fatal read,
  | write, or memory allocation error occurred
  | (meaning decoding must stop), else
  | \c true; for more information about
  | the decoder, check the decoder state
  | with
  | 
  | stream_decoder_get_state().
  |
  */
pub fn flac_stream_decoder_process_single(decoder: *mut StreamDecoder) -> bool {
    
    todo!();
        /*
        
        */
}

/**
  | Decode until the end of the metadata.
  | 
  | This version instructs the decoder
  | to decode from the current position
  | and continue until all the metadata
  | has been read, or until the callbacks
  | return a fatal error or the read callback
  | returns \c STREAM_DECODER_READ_STATUS_END_OF_STREAM.
  | 
  | As the decoder needs more input it will
  | call the read callback.
  | 
  | As each metadata block is decoded, the
  | metadata callback will be called with
  | the decoded metadata.
  | 
  | -----------
  | @param decoder
  | 
  | An initialized decoder instance. \assert
  | 
  | -----------
  | @code
  | 
  | decoder != NULL
  | 
  | -----------
  | @return
  | 
  | bool \c false if any fatal read,
  | write, or memory allocation error occurred
  | (meaning decoding must stop), else
  | \c true; for more information about
  | the decoder, check the decoder state
  | with
  | 
  | stream_decoder_get_state().
  |
  */
pub fn flac_stream_decoder_process_until_end_of_metadata(decoder: *mut StreamDecoder) -> bool {
    
    todo!();
        /*
        
        */
}

/**
  | Decode until the end of the stream.
  | 
  | This version instructs the decoder
  | to decode from the current position
  | and continue until the end of stream
  | (the read callback returns \c STREAM_DECODER_READ_STATUS_END_OF_STREAM),
  | or until the callbacks return a fatal
  | error.
  | 
  | As the decoder needs more input it will
  | call the read callback.
  | 
  | As each metadata block and frame is decoded,
  | the metadata or write callback will
  | be called with the decoded metadata
  | or frame.
  | 
  | -----------
  | @param decoder
  | 
  | An initialized decoder instance. \assert
  | 
  | -----------
  | @code
  | 
  | decoder != NULL
  | 
  | -----------
  | @return
  | 
  | bool \c false if any fatal read,
  | write, or memory allocation error occurred
  | (meaning decoding must stop), else
  | \c true; for more information about
  | the decoder, check the decoder state
  | with
  | 
  | stream_decoder_get_state().
  |
  */
pub fn flac_stream_decoder_process_until_end_of_stream(decoder: *mut StreamDecoder) -> bool {
    
    todo!();
        /*
        
        */
}

/**
  | Skip one audio frame.
  | 
  | This version instructs the decoder
  | to 'skip' a single frame and stop, unless
  | the callbacks return a fatal error or
  | the read callback returns \c STREAM_DECODER_READ_STATUS_END_OF_STREAM.
  | 
  | The decoding flow is the same as what
  | occurs when
  | 
  | stream_decoder_process_single()
  | is called to process an audio frame,
  | except that this function does not decode
  | the parsed data into
  | 
  | PCM or call the write callback. The integrity
  | of the frame is still checked the same
  | way as in the other process functions.
  | 
  | This function will return once one whole
  | frame is skipped, in the same way that
  | stream_decoder_process_single()
  | will return once one whole frame is decoded.
  | 
  | This function can be used in more quickly
  | determining FLAC frame boundaries
  | when decoding of the actual data is not
  | needed, for example when an application
  | is separating a FLAC stream into frames
  | for editing or storing in a container.
  | To do this, the application can use stream_decoder_skip_single_frame()
  | to quickly advance to the next frame,
  | then use
  | 
  | stream_decoder_get_decode_position()
  | to find the new frame boundary.
  | 
  | This function should only be called
  | when the stream has advanced past all
  | the metadata, otherwise it will return
  | \c false.
  | 
  | -----------
  | @param decoder
  | 
  | An initialized decoder instance not
  | in a metadata state. \assert
  | 
  | -----------
  | @code
  | 
  | decoder != NULL
  | 
  | -----------
  | @return
  | 
  | bool \c false if any fatal read,
  | write, or memory allocation error occurred
  | (meaning decoding must stop), or if
  | the decoder is in the STREAM_DECODER_SEARCH_FOR_METADATA
  | or
  | 
  | STREAM_DECODER_READ_METADATA
  | state, else \c true; for more information
  | about the decoder, check the decoder
  | state with
  | 
  | stream_decoder_get_state().
  |
  */
pub fn flac_stream_decoder_skip_single_frame(decoder: *mut StreamDecoder) -> bool {
    
    todo!();
        /*
        
        */
}

/**
  | Flush the input and seek to an absolute
  | sample.
  | 
  | Decoding will resume at the given sample.
  | Note that because of this, the next write
  | callback may contain a partial block.
  | The client must support seeking the
  | input or this function will fail and
  | return \c false. Furthermore, if the
  | decoder state is \c STREAM_DECODER_SEEK_ERROR,
  | then the decoder must be flushed with
  | stream_decoder_flush() or
  | reset with
  | 
  | stream_decoder_reset() before
  | decoding can continue.
  | 
  | -----------
  | @param decoder
  | 
  | A decoder instance.
  | ----------
  | @param sample
  | 
  | The target sample number to seek to.
  | \assert
  | 
  | -----------
  | @code
  | 
  | decoder != NULL
  | 
  | -----------
  | @return
  | 
  | bool \c true if successful, else
  | \c false.
  |
  */
pub fn flac_stream_decoder_seek_absolute(
        decoder: *mut StreamDecoder,
        sample:  u64) -> bool {
    
    todo!();
        /*
        
        */
}
